<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFQuerySpec.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFQuerySpec</TokenIdentifier>
			<Abstract type="html">Object containing the query specification for queries against a soup.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
            
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setQueryType:</TokenIdentifier>
			<Abstract type="html">The type of query to run (exact, range, like).</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSoupQueryType queryType</Declaration>
			
			
			<Anchor>//api/name/queryType</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/queryType</TokenIdentifier>
			<Abstract type="html">The type of query to run (exact, range, like).</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSoupQueryType queryType</Declaration>
			
			
			<Anchor>//api/name/queryType</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/queryType</TokenIdentifier>
			<Abstract type="html">The type of query to run (exact, range, like).</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSoupQueryType queryType</Declaration>
			
			
			<Anchor>//api/name/queryType</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setSmartSql:</TokenIdentifier>
			<Abstract type="html">smartSql passed in for smart queries, computed for all others.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *smartSql</Declaration>
			
			
			<Anchor>//api/name/smartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/smartSql</TokenIdentifier>
			<Abstract type="html">smartSql passed in for smart queries, computed for all others.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *smartSql</Declaration>
			
			
			<Anchor>//api/name/smartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/smartSql</TokenIdentifier>
			<Abstract type="html">smartSql passed in for smart queries, computed for all others.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *smartSql</Declaration>
			
			
			<Anchor>//api/name/smartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setCountSmartSql:</TokenIdentifier>
			<Abstract type="html">countSmartSql: query to compute count of results for smartSql</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *countSmartSql</Declaration>
			
			
			<Anchor>//api/name/countSmartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/countSmartSql</TokenIdentifier>
			<Abstract type="html">countSmartSql: query to compute count of results for smartSql</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *countSmartSql</Declaration>
			
			
			<Anchor>//api/name/countSmartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/countSmartSql</TokenIdentifier>
			<Abstract type="html">countSmartSql: query to compute count of results for smartSql</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *countSmartSql</Declaration>
			
			
			<Anchor>//api/name/countSmartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setIdsSmartSql:</TokenIdentifier>
			<Abstract type="html">idsSmartSql: query returning only ids</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *idsSmartSql</Declaration>
			
			
			<Anchor>//api/name/idsSmartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/idsSmartSql</TokenIdentifier>
			<Abstract type="html">idsSmartSql: query returning only ids</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *idsSmartSql</Declaration>
			
			
			<Anchor>//api/name/idsSmartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/idsSmartSql</TokenIdentifier>
			<Abstract type="html">idsSmartSql: query returning only ids</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *idsSmartSql</Declaration>
			
			
			<Anchor>//api/name/idsSmartSql</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setPageSize:</TokenIdentifier>
			<Abstract type="html">The number of entries per page to return.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger pageSize</Declaration>
			
			
			<Anchor>//api/name/pageSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/pageSize</TokenIdentifier>
			<Abstract type="html">The number of entries per page to return.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger pageSize</Declaration>
			
			
			<Anchor>//api/name/pageSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/pageSize</TokenIdentifier>
			<Abstract type="html">The number of entries per page to return.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger pageSize</Declaration>
			
			
			<Anchor>//api/name/pageSize</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setSoupName:</TokenIdentifier>
			<Abstract type="html">soupName is used for range, exact, and like queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *soupName</Declaration>
			
			
			<Anchor>//api/name/soupName</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/soupName</TokenIdentifier>
			<Abstract type="html">soupName is used for range, exact, and like queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *soupName</Declaration>
			
			
			<Anchor>//api/name/soupName</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/soupName</TokenIdentifier>
			<Abstract type="html">soupName is used for range, exact, and like queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *soupName</Declaration>
			
			
			<Anchor>//api/name/soupName</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setSelectPaths:</TokenIdentifier>
			<Abstract type="html">The paths to return in an array. nil means return the entire soup element.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSArray *selectPaths</Declaration>
			
			
			<Anchor>//api/name/selectPaths</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/selectPaths</TokenIdentifier>
			<Abstract type="html">The paths to return in an array. nil means return the entire soup element.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSArray *selectPaths</Declaration>
			
			
			<Anchor>//api/name/selectPaths</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/selectPaths</TokenIdentifier>
			<Abstract type="html">The paths to return in an array. nil means return the entire soup element.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSArray *selectPaths</Declaration>
			
			
			<Anchor>//api/name/selectPaths</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setPath:</TokenIdentifier>
			<Abstract type="html">The indexPath to use for the query. Compound paths must be dot-delimited ie parent.child.grandchild.field .</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *path</Declaration>
			
			
			<Anchor>//api/name/path</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/path</TokenIdentifier>
			<Abstract type="html">The indexPath to use for the query. Compound paths must be dot-delimited ie parent.child.grandchild.field .</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *path</Declaration>
			
			
			<Anchor>//api/name/path</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/path</TokenIdentifier>
			<Abstract type="html">The indexPath to use for the query. Compound paths must be dot-delimited ie parent.child.grandchild.field .</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *path</Declaration>
			
			
			<Anchor>//api/name/path</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setBeginKey:</TokenIdentifier>
			<Abstract type="html">beginKey is used for range queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *beginKey</Declaration>
			
			
			<Anchor>//api/name/beginKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/beginKey</TokenIdentifier>
			<Abstract type="html">beginKey is used for range queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *beginKey</Declaration>
			
			
			<Anchor>//api/name/beginKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/beginKey</TokenIdentifier>
			<Abstract type="html">beginKey is used for range queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *beginKey</Declaration>
			
			
			<Anchor>//api/name/beginKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setEndKey:</TokenIdentifier>
			<Abstract type="html">endKey is used for range queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *endKey</Declaration>
			
			
			<Anchor>//api/name/endKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/endKey</TokenIdentifier>
			<Abstract type="html">endKey is used for range queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *endKey</Declaration>
			
			
			<Anchor>//api/name/endKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/endKey</TokenIdentifier>
			<Abstract type="html">endKey is used for range queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *endKey</Declaration>
			
			
			<Anchor>//api/name/endKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setLikeKey:</TokenIdentifier>
			<Abstract type="html">likeKey is used for like queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *likeKey</Declaration>
			
			
			<Anchor>//api/name/likeKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/likeKey</TokenIdentifier>
			<Abstract type="html">likeKey is used for like queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *likeKey</Declaration>
			
			
			<Anchor>//api/name/likeKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/likeKey</TokenIdentifier>
			<Abstract type="html">likeKey is used for like queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *likeKey</Declaration>
			
			
			<Anchor>//api/name/likeKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setMatchKey:</TokenIdentifier>
			<Abstract type="html">matchKey is used for exact and match queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *matchKey</Declaration>
			
			
			<Anchor>//api/name/matchKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/matchKey</TokenIdentifier>
			<Abstract type="html">matchKey is used for exact and match queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *matchKey</Declaration>
			
			
			<Anchor>//api/name/matchKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/matchKey</TokenIdentifier>
			<Abstract type="html">matchKey is used for exact and match queries.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *matchKey</Declaration>
			
			
			<Anchor>//api/name/matchKey</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setOrderPath:</TokenIdentifier>
			<Abstract type="html">The indexPath to use for sorting. Compound paths must be dot-delimited ie parent.child.grandchild.field .</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *orderPath</Declaration>
			
			
			<Anchor>//api/name/orderPath</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/orderPath</TokenIdentifier>
			<Abstract type="html">The indexPath to use for sorting. Compound paths must be dot-delimited ie parent.child.grandchild.field .</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *orderPath</Declaration>
			
			
			<Anchor>//api/name/orderPath</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/orderPath</TokenIdentifier>
			<Abstract type="html">The indexPath to use for sorting. Compound paths must be dot-delimited ie parent.child.grandchild.field .</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *orderPath</Declaration>
			
			
			<Anchor>//api/name/orderPath</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setOrder:</TokenIdentifier>
			<Abstract type="html">A sort order for the query (ascending, descending).</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSoupQuerySortOrder order</Declaration>
			
			
			<Anchor>//api/name/order</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/order</TokenIdentifier>
			<Abstract type="html">A sort order for the query (ascending, descending).</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSoupQuerySortOrder order</Declaration>
			
			
			<Anchor>//api/name/order</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/order</TokenIdentifier>
			<Abstract type="html">A sort order for the query (ascending, descending).</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) SFSoupQuerySortOrder order</Declaration>
			
			
			<Anchor>//api/name/order</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/setSqlSortOrder:</TokenIdentifier>
			<Abstract type="html">ASC or DESC</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *sqlSortOrder</Declaration>
			
			
			<Anchor>//api/name/sqlSortOrder</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/sqlSortOrder</TokenIdentifier>
			<Abstract type="html">ASC or DESC</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *sqlSortOrder</Declaration>
			
			
			<Anchor>//api/name/sqlSortOrder</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFQuerySpec/sqlSortOrder</TokenIdentifier>
			<Abstract type="html">ASC or DESC</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *sqlSortOrder</Declaration>
			
			
			<Anchor>//api/name/sqlSortOrder</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newExactQuerySpec:withSelectPaths:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">Factory method to build an exact query spec
Note: caller is responsible for releaseing the query spec</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (nullable SFQuerySpec *)newExactQuerySpec:(NSString *)soupName withSelectPaths:(nullable NSArray *)selectPaths withPath:(NSString *)path withMatchKey:(NSString *)matchKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The target soup name.</Abstract>
				</Parameter><Parameter>
					<Name>selectPaths</Name>
					<Abstract type="html">The paths to return - if nil the entire soup element is returned.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to filter on.</Abstract>
				</Parameter><Parameter>
					<Name>matchKey</Name>
					<Abstract type="html">The exact value to match.</Abstract>
				</Parameter><Parameter>
					<Name>orderPath</Name>
					<Abstract type="html">The path to sort by.</Abstract>
				</Parameter><Parameter>
					<Name>order</Name>
					<Abstract type="html">The sort order.</Abstract>
				</Parameter><Parameter>
					<Name>pageSize</Name>
					<Abstract type="html">The page size.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A query spec object.</Abstract></ReturnValue>
			<Anchor>//api/name/newExactQuerySpec:withSelectPaths:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newExactQuerySpec:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFQuerySpec *)newExactQuerySpec:(NSString *)soupName withPath:(NSString *)path withMatchKey:(NSString *)matchKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			
			
			<Anchor>//api/name/newExactQuerySpec:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newLikeQuerySpec:withSelectPaths:withPath:withLikeKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">Factory method to build an like query spec
Note: caller is responsible for releaseing the query spec</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (nullable SFQuerySpec *)newLikeQuerySpec:(NSString *)soupName withSelectPaths:(nullable NSArray *)selectPaths withPath:(NSString *)path withLikeKey:(NSString *)likeKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The target soup name.</Abstract>
				</Parameter><Parameter>
					<Name>selectPaths</Name>
					<Abstract type="html">The paths to return - if nil the entire soup element is returned.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to filter on.</Abstract>
				</Parameter><Parameter>
					<Name>likeKey</Name>
					<Abstract type="html">The value to match on.</Abstract>
				</Parameter><Parameter>
					<Name>orderPath</Name>
					<Abstract type="html">The path to sort by.</Abstract>
				</Parameter><Parameter>
					<Name>order</Name>
					<Abstract type="html">The sort order.</Abstract>
				</Parameter><Parameter>
					<Name>pageSize</Name>
					<Abstract type="html">The page size.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A query spec object.</Abstract></ReturnValue>
			<Anchor>//api/name/newLikeQuerySpec:withSelectPaths:withPath:withLikeKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newLikeQuerySpec:withPath:withLikeKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFQuerySpec *)newLikeQuerySpec:(NSString *)soupName withPath:(NSString *)path withLikeKey:(NSString *)likeKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			
			
			<Anchor>//api/name/newLikeQuerySpec:withPath:withLikeKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newRangeQuerySpec:withSelectPaths:withPath:withBeginKey:withEndKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">Factory method to build an range query spec
Note: caller is responsible for releaseing the query spec</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (nullable SFQuerySpec *)newRangeQuerySpec:(NSString *)soupName withSelectPaths:(nullable NSArray *)selectPaths withPath:(nullable NSString *)path withBeginKey:(nullable NSString *)beginKey withEndKey:(nullable NSString *)endKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The target soup name.</Abstract>
				</Parameter><Parameter>
					<Name>selectPaths</Name>
					<Abstract type="html">The paths to return - if nil the entire soup element is returned.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to filter on.</Abstract>
				</Parameter><Parameter>
					<Name>beginKey</Name>
					<Abstract type="html">The start of the range.</Abstract>
				</Parameter><Parameter>
					<Name>endKey</Name>
					<Abstract type="html">The end of the range.</Abstract>
				</Parameter><Parameter>
					<Name>orderPath</Name>
					<Abstract type="html">The path to sort by.</Abstract>
				</Parameter><Parameter>
					<Name>order</Name>
					<Abstract type="html">The sort order.</Abstract>
				</Parameter><Parameter>
					<Name>pageSize</Name>
					<Abstract type="html">The page size.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A query spec object.</Abstract></ReturnValue>
			<Anchor>//api/name/newRangeQuerySpec:withSelectPaths:withPath:withBeginKey:withEndKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newRangeQuerySpec:withPath:withBeginKey:withEndKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFQuerySpec *)newRangeQuerySpec:(NSString *)soupName withPath:(NSString *)path withBeginKey:(NSString *)beginKey withEndKey:(NSString *)endKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			
			
			<Anchor>//api/name/newRangeQuerySpec:withPath:withBeginKey:withEndKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newAllQuerySpec:withSelectPaths:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">Factory method to build a query spec to return all data from a soup.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFQuerySpec *)newAllQuerySpec:(NSString *)soupName withSelectPaths:(nullable NSArray *)selectPaths withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The target soup name.</Abstract>
				</Parameter><Parameter>
					<Name>selectPaths</Name>
					<Abstract type="html">The paths to return - if nil the entire soup element is returned.</Abstract>
				</Parameter><Parameter>
					<Name>orderPath</Name>
					<Abstract type="html">The path to sort by.</Abstract>
				</Parameter><Parameter>
					<Name>order</Name>
					<Abstract type="html">The sort order.</Abstract>
				</Parameter><Parameter>
					<Name>pageSize</Name>
					<Abstract type="html">The page size.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/newAllQuerySpec:withSelectPaths:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newAllQuerySpec:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFQuerySpec *)newAllQuerySpec:(NSString *)soupName withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			
			
			<Anchor>//api/name/newAllQuerySpec:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newMatchQuerySpec:withSelectPaths:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">Factory method to build a match query spec (full-text search)
Note: caller is responsible for releaseing the query spec</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (nullable SFQuerySpec *)newMatchQuerySpec:(NSString *)soupName withSelectPaths:(nullable NSArray *)selectPaths withPath:(NSString *)path withMatchKey:(NSString *)matchKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The target soup name.</Abstract>
				</Parameter><Parameter>
					<Name>selectPaths</Name>
					<Abstract type="html">The paths to return - if nil the entire soup element is returned.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path to filter on - can be nil to match against any full-text indexed paths.</Abstract>
				</Parameter><Parameter>
					<Name>matchKey</Name>
					<Abstract type="html">The match query string.</Abstract>
				</Parameter><Parameter>
					<Name>orderPath</Name>
					<Abstract type="html">The path to sort by.</Abstract>
				</Parameter><Parameter>
					<Name>order</Name>
					<Abstract type="html">The sort order.</Abstract>
				</Parameter><Parameter>
					<Name>pageSize</Name>
					<Abstract type="html">The page size.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A query spec object.</Abstract></ReturnValue>
			<Anchor>//api/name/newMatchQuerySpec:withSelectPaths:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newMatchQuerySpec:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFQuerySpec *)newMatchQuerySpec:(NSString *)soupName withPath:(NSString *)path withMatchKey:(NSString *)matchKey withOrderPath:(NSString *)orderPath withOrder:(SFSoupQuerySortOrder)order withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			
			
			<Anchor>//api/name/newMatchQuerySpec:withPath:withMatchKey:withOrderPath:withOrder:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/newSmartQuerySpec:withPageSize:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">Factory method to build a smart query spec
Note: caller is responsible for releaseing the query spec</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (nullable SFQuerySpec *)newSmartQuerySpec:(NSString *)smartSql withPageSize:(NSUInteger)pageSize NS_SWIFT_NAME</Declaration>
			<Parameters>
				<Parameter>
					<Name>smartSql</Name>
					<Abstract type="html">The smart sql query.</Abstract>
				</Parameter><Parameter>
					<Name>pageSize</Name>
					<Abstract type="html">The page size.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A query spec object.</Abstract></ReturnValue>
			<Anchor>//api/name/newSmartQuerySpec:withPageSize:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/initWithDictionary:withSoupName:NS_SWIFT_NAME:</TokenIdentifier>
			<Abstract type="html">Initializes the object with the given query spec.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>- (id)initWithDictionary:(NSDictionary *)querySpec withSoupName:(NSString *)targetSoupName NS_SWIFT_NAME</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">the name/value pairs defining the query spec.</Abstract>
				</Parameter><Parameter>
					<Name>targetSoupName</Name>
					<Abstract type="html">the soup name targeted (not nil for exact/like/range queries)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new instance of the object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithDictionary:withSoupName:NS_SWIFT_NAME:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/asDictionary</TokenIdentifier>
			<Abstract type="html">The NSDictionary representation of the query spec.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)asDictionary</Declaration>
			
			
			<Anchor>//api/name/asDictionary</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFQuerySpec/bindsForQuerySpec</TokenIdentifier>
			<Abstract type="html">Return bind arguments for query.</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>- (nullable NSArray *)bindsForQuerySpec</Declaration>
			
			<ReturnValue><Abstract type="html">bind arguments.</Abstract></ReturnValue>
			<Anchor>//api/name/bindsForQuerySpec</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/queryTypeFromString:</TokenIdentifier>
			<Abstract type="html">Enum to/from string helper methods</Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFSoupQueryType)queryTypeFromString:(NSString *)queryType</Declaration>
			
			
			<Anchor>//api/name/queryTypeFromString:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/queryTypeFromEnum:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (NSString *)queryTypeFromEnum:(SFSoupQueryType)queryType</Declaration>
			
			
			<Anchor>//api/name/queryTypeFromEnum:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/sortOrderFromString:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (SFSoupQuerySortOrder)sortOrderFromString:(NSString *)sortOrder</Declaration>
			
			
			<Anchor>//api/name/sortOrderFromString:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFQuerySpec/sortOrderFromEnum:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFQuerySpec.h</DeclaredIn>
			
			<Declaration>+ (NSString *)sortOrderFromEnum:(SFSoupQuerySortOrder)sortOrder</Declaration>
			
			
			<Anchor>//api/name/sortOrderFromEnum:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
        
        
	</File>
</Tokens>