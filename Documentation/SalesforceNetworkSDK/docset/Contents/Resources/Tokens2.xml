<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFNetworkEngine.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFNetworkEngine</TokenIdentifier>
			<Abstract type="html">Main class used to manage and send SFNetworkOperation</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setCoordinator:</TokenIdentifier>
			<Abstract type="html">​SFNetwork​Engine relies on SFNetworkCoordinator to know where to connect and who to connect as and with what access token</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFNetworkCoordinator *coordinator</Declaration>
			
			
			<Anchor>//api/name/coordinator</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/coordinator</TokenIdentifier>
			<Abstract type="html">​SFNetwork​Engine relies on SFNetworkCoordinator to know where to connect and who to connect as and with what access token</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFNetworkCoordinator *coordinator</Declaration>
			
			
			<Anchor>//api/name/coordinator</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/coordinator</TokenIdentifier>
			<Abstract type="html">​SFNetwork​Engine relies on SFNetworkCoordinator to know where to connect and who to connect as and with what access token</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFNetworkCoordinator *coordinator</Declaration>
			
			
			<Anchor>//api/name/coordinator</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setRemoteHost:</TokenIdentifier>
			<Abstract type="html">If plan to use SFNetworkEngine against a non-SFDC source, use remote host to initialize the SFNetworkEngine instead.</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *remoteHost</Declaration>
			
			
			<Anchor>//api/name/remoteHost</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/remoteHost</TokenIdentifier>
			<Abstract type="html">If plan to use SFNetworkEngine against a non-SFDC source, use remote host to initialize the SFNetworkEngine instead.</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *remoteHost</Declaration>
			
			
			<Anchor>//api/name/remoteHost</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/remoteHost</TokenIdentifier>
			<Abstract type="html">If plan to use SFNetworkEngine against a non-SFDC source, use remote host to initialize the SFNetworkEngine instead.</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *remoteHost</Declaration>
			
			
			<Anchor>//api/name/remoteHost</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setCustomHeaders:</TokenIdentifier>
			<Abstract type="html">Custom HTTP headers that will be set for all SFNetworkOperation before executing</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSDictionary *customHeaders</Declaration>
			
			
			<Anchor>//api/name/customHeaders</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/customHeaders</TokenIdentifier>
			<Abstract type="html">Custom HTTP headers that will be set for all SFNetworkOperation before executing</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSDictionary *customHeaders</Declaration>
			
			
			<Anchor>//api/name/customHeaders</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/customHeaders</TokenIdentifier>
			<Abstract type="html">Custom HTTP headers that will be set for all SFNetworkOperation before executing</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSDictionary *customHeaders</Declaration>
			
			
			<Anchor>//api/name/customHeaders</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setReachabilityChangedHandler:</TokenIdentifier>
			<Abstract type="html">Handler that you implement to monitor reachability changes</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( SFNetworkStatus ns ) reachabilityChangedHandler</Declaration>
			
			
			<Anchor>//api/name/reachabilityChangedHandler</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/reachabilityChangedHandler</TokenIdentifier>
			<Abstract type="html">Handler that you implement to monitor reachability changes</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( SFNetworkStatus ns ) reachabilityChangedHandler</Declaration>
			
			
			<Anchor>//api/name/reachabilityChangedHandler</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/reachabilityChangedHandler</TokenIdentifier>
			<Abstract type="html">Handler that you implement to monitor reachability changes</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) void ( ^ ) ( SFNetworkStatus ns ) reachabilityChangedHandler</Declaration>
			
			
			<Anchor>//api/name/reachabilityChangedHandler</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setNetworkStatus:</TokenIdentifier>
			<Abstract type="html">Return current network status</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) SFNetworkStatus networkStatus</Declaration>
			
			
			<Anchor>//api/name/networkStatus</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/networkStatus</TokenIdentifier>
			<Abstract type="html">Return current network status</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) SFNetworkStatus networkStatus</Declaration>
			
			
			<Anchor>//api/name/networkStatus</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/networkStatus</TokenIdentifier>
			<Abstract type="html">Return current network status</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) SFNetworkStatus networkStatus</Declaration>
			
			
			<Anchor>//api/name/networkStatus</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setOperationTimeout:</TokenIdentifier>
			<Abstract type="html">Default time out for all SFNetworkOperation executed by SFNetworkEngine in seconds. Default is 180 seconds</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval operationTimeout</Declaration>
			
			
			<Anchor>//api/name/operationTimeout</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/operationTimeout</TokenIdentifier>
			<Abstract type="html">Default time out for all SFNetworkOperation executed by SFNetworkEngine in seconds. Default is 180 seconds</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval operationTimeout</Declaration>
			
			
			<Anchor>//api/name/operationTimeout</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/operationTimeout</TokenIdentifier>
			<Abstract type="html">Default time out for all SFNetworkOperation executed by SFNetworkEngine in seconds. Default is 180 seconds</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval operationTimeout</Declaration>
			
			
			<Anchor>//api/name/operationTimeout</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setEnableHttpPipeling:</TokenIdentifier>
			<Abstract type="html">Set to YES if enable HTTP Pipeling for HTTP GET requests. Default value is YES</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL enableHttpPipeling</Declaration>
			
			
			<Anchor>//api/name/enableHttpPipeling</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/enableHttpPipeling</TokenIdentifier>
			<Abstract type="html">Set to YES if enable HTTP Pipeling for HTTP GET requests. Default value is YES</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL enableHttpPipeling</Declaration>
			
			
			<Anchor>//api/name/enableHttpPipeling</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/enableHttpPipeling</TokenIdentifier>
			<Abstract type="html">Set to YES if enable HTTP Pipeling for HTTP GET requests. Default value is YES</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL enableHttpPipeling</Declaration>
			
			
			<Anchor>//api/name/enableHttpPipeling</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setSupportLocalTestData:</TokenIdentifier>
			<Abstract type="html">Set to YES to allow SFNetworkEngine to let SFNetworkOperation to use local test file to simulate server response if [SFNetworkOperation localTestDataPath] is set. Default value is NO</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL supportLocalTestData</Declaration>
			
			
			<Anchor>//api/name/supportLocalTestData</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/supportLocalTestData</TokenIdentifier>
			<Abstract type="html">Set to YES to allow SFNetworkEngine to let SFNetworkOperation to use local test file to simulate server response if [SFNetworkOperation localTestDataPath] is set. Default value is NO</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL supportLocalTestData</Declaration>
			
			
			<Anchor>//api/name/supportLocalTestData</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/supportLocalTestData</TokenIdentifier>
			<Abstract type="html">Set to YES to allow SFNetworkEngine to let SFNetworkOperation to use local test file to simulate server response if [SFNetworkOperation localTestDataPath] is set. Default value is NO</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL supportLocalTestData</Declaration>
			
			
			<Anchor>//api/name/supportLocalTestData</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setSuspendRequestsWhenAppEntersBackground:</TokenIdentifier>
			<Abstract type="html">Set to true to suspend all pending requests when app enters background. Default is YES</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, getter=shouldSuspendRequestsWhenAppEntersBackground) BOOL suspendRequestsWhenAppEntersBackground</Declaration>
			
			
			<Anchor>//api/name/suspendRequestsWhenAppEntersBackground</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/shouldSuspendRequestsWhenAppEntersBackground</TokenIdentifier>
			<Abstract type="html">Set to true to suspend all pending requests when app enters background. Default is YES</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, getter=shouldSuspendRequestsWhenAppEntersBackground) BOOL suspendRequestsWhenAppEntersBackground</Declaration>
			
			
			<Anchor>//api/name/suspendRequestsWhenAppEntersBackground</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/suspendRequestsWhenAppEntersBackground</TokenIdentifier>
			<Abstract type="html">Set to true to suspend all pending requests when app enters background. Default is YES</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, getter=shouldSuspendRequestsWhenAppEntersBackground) BOOL suspendRequestsWhenAppEntersBackground</Declaration>
			
			
			<Anchor>//api/name/suspendRequestsWhenAppEntersBackground</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setDelegate:</TokenIdentifier>
			<Abstract type="html">NetworkEngine delegate responsible for refresh session</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (weak) id&lt;SFNetworkEngineDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/delegate</TokenIdentifier>
			<Abstract type="html">NetworkEngine delegate responsible for refresh session</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (weak) id&lt;SFNetworkEngineDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/delegate</TokenIdentifier>
			<Abstract type="html">NetworkEngine delegate responsible for refresh session</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>@property (weak) id&lt;SFNetworkEngineDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFNetworkEngine/sharedInstance</TokenIdentifier>
			<Abstract type="html">Returns the singleton instance of SFNetworkEngine
After a successful oauth login with an SFOAuthCoordinator, you
should set the coordinator property of this instance.</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>+ (SFNetworkEngine *)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setHeaderValue:forKey:</TokenIdentifier>
			<Abstract type="html">Set value for the specified HTTP header</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)setHeaderValue:(NSString *)value forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">Header value.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">Header key</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setHeaderValue:forKey:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/operationWithUrl:params:httpMethod:ssl:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote call</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)operationWithUrl:(NSString *)url params:(NSDictionary *)params httpMethod:(NSString *)method ssl:(BOOL)useSSL</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">Url to the remote service to invoke. If this url is a relative URL, SFNetworkEngine will automatically construct the full URL.</Abstract>
				</Parameter><Parameter>
					<Name>params</Name>
					<Abstract type="html">Key &amp;amp; value pair as request parameters</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">the http method to use. Valid value include GET, POST, DELETE, PUT and PATCH</Abstract>
				</Parameter><Parameter>
					<Name>useSSL</Name>
					<Abstract type="html">Set to YES to use SSL connection</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the SFNetworkOperation object that can be executed by calling `enqueueOperation method</Abstract></ReturnValue>
			<Anchor>//api/name/operationWithUrl:params:httpMethod:ssl:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/operationWithUrl:params:httpMethod:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote request under SSL.</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)operationWithUrl:(NSString *)url params:(NSDictionary *)params httpMethod:(NSString *)method</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">Url to the remote service to invoke.  If this url is a relative URL, [[SFOAuthCoordinator credentials] instanceUrl] will be automatically added to it</Abstract>
				</Parameter><Parameter>
					<Name>params</Name>
					<Abstract type="html">Key &amp;amp; value pair as request parameters</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">the http method to use. Valid value include GET, POST, DELETE, PUT and PATCH</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the SFNetworkOperation object that can be executed by calling `enqueueOperation method</Abstract></ReturnValue>
			<Anchor>//api/name/operationWithUrl:params:httpMethod:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/get:params:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote call using SFNetworkOperationGetMethod method under SSL</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)get:(NSString *)url params:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/get:params:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/post:params:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote call using SFNetworkOperationPostMethod method under SSL</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)post:(NSString *)url params:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/post:params:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/put:params:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote call using SFNetworkOperationPutMethod method under SSL</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)put:(NSString *)url params:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/put:params:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/delete:params:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote call using SFNetworkOperationDeleteMethod method under SSL</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)delete:(NSString *)url params:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/delete:params:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/patch:params:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote call using SFNetworkOperationPathMethod method under SSL</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)patch:(NSString *)url params:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/patch:params:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/head:params:</TokenIdentifier>
			<Abstract type="html">Returns a SFNetworkOperation that can be used to execute the specified remote call using SFNetworkOperationPathMethod method under SSL</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)head:(NSString *)url params:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/head:params:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/activeOperationWithUrl:params:httpMethod:</TokenIdentifier>
			<Abstract type="html">Returns SFNetworkOperation for the specified condition</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)activeOperationWithUrl:(NSString *)url params:(NSDictionary *)params httpMethod:(NSString *)method</Declaration>
			
			
			<Anchor>//api/name/activeOperationWithUrl:params:httpMethod:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/enqueueOperation:</TokenIdentifier>
			<Abstract type="html">Enqueues SFNetworkOperation for execution</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)enqueueOperation:(SFNetworkOperation *)operation</Declaration>
			<Parameters>
				<Parameter>
					<Name>operation</Name>
					<Abstract type="html">SFNetworkOperation object to be enqueued and executed by SFNetworkEngine</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enqueueOperation:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/cleanup</TokenIdentifier>
			<Abstract type="html">Clean up the SFNetworkEngine due to host change or logout</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)cleanup</Declaration>
			
			
			<Anchor>//api/name/cleanup</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/isReachable</TokenIdentifier>
			<Abstract type="html">Returns YES if [[SFOAuthCoordinator credentials] instanceUrl] is reachable
	If coordinator is not set before this method is called, it will return NO</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (BOOL)isReachable</Declaration>
			
			
			<Anchor>//api/name/isReachable</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/failOperationsWaitingForAccessTokenWithError:</TokenIdentifier>
			<Abstract type="html">Fatal OAuth error happened. Call error block of all operations stored in operationsWaitingForAccessToken queue</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)failOperationsWaitingForAccessTokenWithError:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/failOperationsWaitingForAccessTokenWithError:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/cancelAllOperations</TokenIdentifier>
			<Abstract type="html">Cancel all operations that are waiting to be excecuted</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)cancelAllOperations</Declaration>
			
			
			<Anchor>//api/name/cancelAllOperations</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/cancelAllOperationsWithTag:</TokenIdentifier>
			<Abstract type="html">Cancel all operations with a specific tag that are waiting to be excecuted</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)cancelAllOperationsWithTag:(NSString *)operationTag</Declaration>
			<Parameters>
				<Parameter>
					<Name>operationTag</Name>
					<Abstract type="html">Operation tag</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cancelAllOperationsWithTag:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/suspendAllOperations</TokenIdentifier>
			<Abstract type="html">Suspend all operations that are waiting to be excecuted</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)suspendAllOperations</Declaration>
			
			
			<Anchor>//api/name/suspendAllOperations</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/resumeAllOperations</TokenIdentifier>
			<Abstract type="html">Resume all operations that are suspended</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)resumeAllOperations</Declaration>
			
			
			<Anchor>//api/name/resumeAllOperations</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/hasPendingOperationsWithTag:</TokenIdentifier>
			<Abstract type="html">Returns YES of there are pending requests matching the specified operation tag</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (BOOL)hasPendingOperationsWithTag:(NSString *)operationTag</Declaration>
			<Parameters>
				<Parameter>
					<Name>operationTag</Name>
					<Abstract type="html">Operation tag</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/hasPendingOperationsWithTag:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/operationsWithTag:</TokenIdentifier>
			<Abstract type="html">Returns an array of operations that matches the tag</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (NSArray *)operationsWithTag:(NSString *)operationTag</Declaration>
			
			
			<Anchor>//api/name/operationsWithTag:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/replayOperationsWaitingForAccessToken</TokenIdentifier>
			<Abstract type="html">Replay all operations stored in operationsWaitingForAccessToken queue</Abstract>
			<DeclaredIn>SFNetworkEngine.h</DeclaredIn>
			
			<Declaration>- (void)replayOperationsWaitingForAccessToken</Declaration>
			
			
			<Anchor>//api/name/replayOperationsWaitingForAccessToken</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setInternalNetworkEngine:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) MKNetworkEngine *internalNetworkEngine</Declaration>
			
			
			<Anchor>//api/name/internalNetworkEngine</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/internalNetworkEngine</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) MKNetworkEngine *internalNetworkEngine</Declaration>
			
			
			<Anchor>//api/name/internalNetworkEngine</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/internalNetworkEngine</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) MKNetworkEngine *internalNetworkEngine</Declaration>
			
			
			<Anchor>//api/name/internalNetworkEngine</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setOperationsWaitingForAccessToken:</TokenIdentifier>
			<Abstract type="html">Queue to store all operations queued up due to expired access token</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property NSMutableArray *operationsWaitingForAccessToken</Declaration>
			
			
			<Anchor>//api/name/operationsWaitingForAccessToken</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/operationsWaitingForAccessToken</TokenIdentifier>
			<Abstract type="html">Queue to store all operations queued up due to expired access token</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property NSMutableArray *operationsWaitingForAccessToken</Declaration>
			
			
			<Anchor>//api/name/operationsWaitingForAccessToken</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/operationsWaitingForAccessToken</TokenIdentifier>
			<Abstract type="html">Queue to store all operations queued up due to expired access token</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property NSMutableArray *operationsWaitingForAccessToken</Declaration>
			
			
			<Anchor>//api/name/operationsWaitingForAccessToken</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setOperationsWaitingForNetwork:</TokenIdentifier>
			<Abstract type="html">Queue to store all operations queued up due to network error</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property NSMutableArray *operationsWaitingForNetwork</Declaration>
			
			
			<Anchor>//api/name/operationsWaitingForNetwork</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/operationsWaitingForNetwork</TokenIdentifier>
			<Abstract type="html">Queue to store all operations queued up due to network error</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property NSMutableArray *operationsWaitingForNetwork</Declaration>
			
			
			<Anchor>//api/name/operationsWaitingForNetwork</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/operationsWaitingForNetwork</TokenIdentifier>
			<Abstract type="html">Queue to store all operations queued up due to network error</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property NSMutableArray *operationsWaitingForNetwork</Declaration>
			
			
			<Anchor>//api/name/operationsWaitingForNetwork</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setAccessTokenBeingRefreshed:</TokenIdentifier>
			<Abstract type="html">Flag to indicate whether or not SFNetworkEngine token refresh flow is in progress or not</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly, getter=isAccessTokenBeingRefreshed) BOOL accessTokenBeingRefreshed</Declaration>
			
			
			<Anchor>//api/name/accessTokenBeingRefreshed</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/isAccessTokenBeingRefreshed</TokenIdentifier>
			<Abstract type="html">Flag to indicate whether or not SFNetworkEngine token refresh flow is in progress or not</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly, getter=isAccessTokenBeingRefreshed) BOOL accessTokenBeingRefreshed</Declaration>
			
			
			<Anchor>//api/name/accessTokenBeingRefreshed</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/accessTokenBeingRefreshed</TokenIdentifier>
			<Abstract type="html">Flag to indicate whether or not SFNetworkEngine token refresh flow is in progress or not</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly, getter=isAccessTokenBeingRefreshed) BOOL accessTokenBeingRefreshed</Declaration>
			
			
			<Anchor>//api/name/accessTokenBeingRefreshed</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/setNetworkChangeShouldTriggerTokenRefresh:</TokenIdentifier>
			<Abstract type="html">Flag to indicate whether network status change should trigger access token refresh</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL networkChangeShouldTriggerTokenRefresh</Declaration>
			
			
			<Anchor>//api/name/networkChangeShouldTriggerTokenRefresh</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/networkChangeShouldTriggerTokenRefresh</TokenIdentifier>
			<Abstract type="html">Flag to indicate whether network status change should trigger access token refresh</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL networkChangeShouldTriggerTokenRefresh</Declaration>
			
			
			<Anchor>//api/name/networkChangeShouldTriggerTokenRefresh</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFNetworkEngine/networkChangeShouldTriggerTokenRefresh</TokenIdentifier>
			<Abstract type="html">Flag to indicate whether network status change should trigger access token refresh</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL networkChangeShouldTriggerTokenRefresh</Declaration>
			
			
			<Anchor>//api/name/networkChangeShouldTriggerTokenRefresh</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/readDataFromTestFile:</TokenIdentifier>
			<Abstract type="html">Read and return data from local test file</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>- (NSData *)readDataFromTestFile:(NSString *)localDataFilePath</Declaration>
			<Parameters>
				<Parameter>
					<Name>localDataFilePath</Name>
					<Abstract type="html">Path to the local test data file. Full path must be provided</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/readDataFromTestFile:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/startRefreshAccessTokenFlow</TokenIdentifier>
			<Abstract type="html">Start refresh access token flow</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>- (void)startRefreshAccessTokenFlow</Declaration>
			
			
			<Anchor>//api/name/startRefreshAccessTokenFlow</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/queueOperationOnExpiredAccessToken:</TokenIdentifier>
			<Abstract type="html">Queue SFNetworkOperation due to expired access token</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>- (void)queueOperationOnExpiredAccessToken:(SFNetworkOperation *)operation</Declaration>
			
			
			<Anchor>//api/name/queueOperationOnExpiredAccessToken:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/queueOperationOnNetworkError:</TokenIdentifier>
			<Abstract type="html">Queue SFNetworkOperation due to network error</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>- (void)queueOperationOnNetworkError:(SFNetworkOperation *)operation</Declaration>
			
			
			<Anchor>//api/name/queueOperationOnNetworkError:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/replayOperationsWaitingForNetwork</TokenIdentifier>
			<Abstract type="html">Replay all operations stored in operationsWaitingForNetwork queue</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>- (void)replayOperationsWaitingForNetwork</Declaration>
			
			
			<Anchor>//api/name/replayOperationsWaitingForNetwork</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFNetworkEngine/cloneInternalOperation:</TokenIdentifier>
			<Abstract type="html">Clone the internal operation. Used to re-queue a failed operation</Abstract>
			<DeclaredIn>SFNetworkEngine+Internal.h</DeclaredIn>
			
			<Declaration>- (SFNetworkOperation *)cloneInternalOperation:(SFNetworkOperation *)operation</Declaration>
			<Parameters>
				<Parameter>
					<Name>operation</Name>
					<Abstract type="html">Existing SFNetworkOperation to clone from</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cloneInternalOperation:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
	</File>
</Tokens>