<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFUserAccountManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFUserAccountManager</TokenIdentifier>
			<Abstract type="html">Class used to manage the accounts functions used across the app.
It supports multiple accounts and their associated credentials.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
            
			
			<NodeRef refid="112"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setCurrentUser:</TokenIdentifier>
			<Abstract type="html">The current user account.  This property may be nil if the user
has never logged in.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) SFUserAccount *currentUser</Declaration>
			
			
			<Anchor>//api/name/currentUser</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/currentUser</TokenIdentifier>
			<Abstract type="html">The current user account.  This property may be nil if the user
has never logged in.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) SFUserAccount *currentUser</Declaration>
			
			
			<Anchor>//api/name/currentUser</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/currentUser</TokenIdentifier>
			<Abstract type="html">The current user account.  This property may be nil if the user
has never logged in.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) SFUserAccount *currentUser</Declaration>
			
			
			<Anchor>//api/name/currentUser</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setCurrentUserAnonymous:</TokenIdentifier>
			<Abstract type="html">Returns YES if the current user is anonymous, no otherwise
  </Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isCurrentUserAnonymous) BOOL currentUserAnonymous</Declaration>
			
			
			<Anchor>//api/name/currentUserAnonymous</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/isCurrentUserAnonymous</TokenIdentifier>
			<Abstract type="html">Returns YES if the current user is anonymous, no otherwise
  </Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isCurrentUserAnonymous) BOOL currentUserAnonymous</Declaration>
			
			
			<Anchor>//api/name/currentUserAnonymous</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/currentUserAnonymous</TokenIdentifier>
			<Abstract type="html">Returns YES if the current user is anonymous, no otherwise
  </Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isCurrentUserAnonymous) BOOL currentUserAnonymous</Declaration>
			
			
			<Anchor>//api/name/currentUserAnonymous</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setCurrentUserIdentity:</TokenIdentifier>
			<Abstract type="html">  Convenience property to retrieve the current user&apos;s identity.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, nullable) SFUserAccountIdentity *currentUserIdentity</Declaration>
			
			
			<Anchor>//api/name/currentUserIdentity</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/currentUserIdentity</TokenIdentifier>
			<Abstract type="html">  Convenience property to retrieve the current user&apos;s identity.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, nullable) SFUserAccountIdentity *currentUserIdentity</Declaration>
			
			
			<Anchor>//api/name/currentUserIdentity</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/currentUserIdentity</TokenIdentifier>
			<Abstract type="html">  Convenience property to retrieve the current user&apos;s identity.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, nullable) SFUserAccountIdentity *currentUserIdentity</Declaration>
			
			
			<Anchor>//api/name/currentUserIdentity</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setCurrentCommunityId:</TokenIdentifier>
			<Abstract type="html">  Convenience property to retrieve the current user&apos;s communityId.
This property is an alias for currentUser.communityId</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, nullable) NSString *currentCommunityId</Declaration>
			
			
			<Anchor>//api/name/currentCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/currentCommunityId</TokenIdentifier>
			<Abstract type="html">  Convenience property to retrieve the current user&apos;s communityId.
This property is an alias for currentUser.communityId</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, nullable) NSString *currentCommunityId</Declaration>
			
			
			<Anchor>//api/name/currentCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/currentCommunityId</TokenIdentifier>
			<Abstract type="html">  Convenience property to retrieve the current user&apos;s communityId.
This property is an alias for currentUser.communityId</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, nullable) NSString *currentCommunityId</Declaration>
			
			
			<Anchor>//api/name/currentCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setPreviousCommunityId:</TokenIdentifier>
			<Abstract type="html">A convenience property to store the previous community
id as it may change during early OAuth flow and we want to retain it</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *previousCommunityId</Declaration>
			
			
			<Anchor>//api/name/previousCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/previousCommunityId</TokenIdentifier>
			<Abstract type="html">A convenience property to store the previous community
id as it may change during early OAuth flow and we want to retain it</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *previousCommunityId</Declaration>
			
			
			<Anchor>//api/name/previousCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/previousCommunityId</TokenIdentifier>
			<Abstract type="html">A convenience property to store the previous community
id as it may change during early OAuth flow and we want to retain it</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *previousCommunityId</Declaration>
			
			
			<Anchor>//api/name/previousCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFUserAccountManager/sharedInstance</TokenIdentifier>
			<Abstract type="html">Shared singleton</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>+ (instancetype)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFUserAccountManager/applyCurrentLogLevel:</TokenIdentifier>
			<Abstract type="html">Applies the current log level to the OAuth credentials that
control the OAuth library log level.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>+ (void)applyCurrentLogLevel:(SFOAuthCredentials *)credentials</Declaration>
			<Parameters>
				<Parameter>
					<Name>credentials</Name>
					<Abstract type="html">OAuth credentials whose log level will be updated</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applyCurrentLogLevel:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/addDelegate:</TokenIdentifier>
			<Abstract type="html">Adds a delegate to this user account manager.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)addDelegate:(id&lt;SFUserAccountManagerDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The delegate to add.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addDelegate:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/removeDelegate:</TokenIdentifier>
			<Abstract type="html">Removes a delegate from this user account manager.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)removeDelegate:(id&lt;SFUserAccountManagerDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The delegate to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeDelegate:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/loadAccounts:</TokenIdentifier>
			<Abstract type="html">Loads all the accounts.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)loadAccounts:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">On output, the error if the return value is NO</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the accounts were loaded properly, NO in case of error</Abstract></ReturnValue>
			<Anchor>//api/name/loadAccounts:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/allUserAccounts</TokenIdentifier>
			<Abstract type="html">An NSArray of all the SFUserAccount instances for the app.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSArray&lt;SFUserAccount*&gt; *)allUserAccounts</Declaration>
			
			
			<Anchor>//api/name/allUserAccounts</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/allUserIdentities</TokenIdentifier>
			<Abstract type="html">Returns all the user identities sorted by Org ID and User ID.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSArray&lt;SFUserAccountIdentity*&gt; *)allUserIdentities</Declaration>
			
			
			<Anchor>//api/name/allUserIdentities</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/createUserAccount:</TokenIdentifier>
			<Abstract type="html">Create an account when necessary using the credentials provided.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (SFUserAccount *)createUserAccount:(SFOAuthCredentials *)credentials</Declaration>
			<Parameters>
				<Parameter>
					<Name>credentials</Name>
					<Abstract type="html">The credentials to use.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createUserAccount:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/userAccountForUserIdentity:</TokenIdentifier>
			<Abstract type="html">Allows you to look up the user account associated with a given user identity.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (nullable SFUserAccount *)userAccountForUserIdentity:(SFUserAccountIdentity *)userIdentity</Declaration>
			<Parameters>
				<Parameter>
					<Name>userIdentity</Name>
					<Abstract type="html">The user identity of the user account to be looked up</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/userAccountForUserIdentity:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/accountsForOrgId:</TokenIdentifier>
			<Abstract type="html">Returns all accounts that have access to a particular org</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;SFUserAccount*&gt; *)accountsForOrgId:(NSString *)orgId</Declaration>
			<Parameters>
				<Parameter>
					<Name>orgId</Name>
					<Abstract type="html">The org to match accounts against</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of accounts that can access that org</Abstract></ReturnValue>
			<Anchor>//api/name/accountsForOrgId:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/accountsForInstanceURL:</TokenIdentifier>
			<Abstract type="html">Returns all accounts that match a particular instance URL</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;SFUserAccount*&gt; *)accountsForInstanceURL:(NSURL *)instanceURL</Declaration>
			<Parameters>
				<Parameter>
					<Name>instanceURL</Name>
					<Abstract type="html">The host parameter of a given instance URL</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of accounts that match that instance URL</Abstract></ReturnValue>
			<Anchor>//api/name/accountsForInstanceURL:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/saveAccountForUser:error:</TokenIdentifier>
			<Abstract type="html">Adds/Updates a user account</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)saveAccountForUser:(SFUserAccount *)userAccount error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>userAccount</Name>
					<Abstract type="html">The account to be added</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveAccountForUser:error:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/accountForCredentials:</TokenIdentifier>
			<Abstract type="html">Lookup  a user account</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (SFUserAccount *)accountForCredentials:(SFOAuthCredentials *)credentials</Declaration>
			<Parameters>
				<Parameter>
					<Name>credentials</Name>
					<Abstract type="html">used to  up Account matching the credentials</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/accountForCredentials:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/deleteAccountForUser:error:</TokenIdentifier>
			<Abstract type="html">Allows you to remove the given user account.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)deleteAccountForUser:(SFUserAccount *)user error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>user</Name>
					<Abstract type="html">The user account to remove.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Output error parameter, populated if there was an error deleting
the account (likely from the filesystem operations).</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the deletion was successful, NO otherwise.  Note: If no persisted account matching
the user parameter is found, no action will be taken, and deletion will be reported as successful.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteAccountForUser:error:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/clearAllAccountState</TokenIdentifier>
			<Abstract type="html">Clear all the accounts state (but do not change anything on the disk).</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)clearAllAccountState</Declaration>
			
			
			<Anchor>//api/name/clearAllAccountState</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/applyCredentials:</TokenIdentifier>
			<Abstract type="html">Invoke this method to apply the specified credentials to the
a user whose credentials match. If no user exists, a new one is created. Fire notifications.
This will post user update notification.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (SFUserAccount *)applyCredentials:(SFOAuthCredentials *)credentials</Declaration>
			<Parameters>
				<Parameter>
					<Name>credentials</Name>
					<Abstract type="html">The credentials to apply</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applyCredentials:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/applyCredentials:withIdData:</TokenIdentifier>
			<Abstract type="html">Invoke this method to apply the specified credentials to the
a user whose credentials match. If no user exists, a new one is created. Fire notifications.
This will post user update notification.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (SFUserAccount *)applyCredentials:(SFOAuthCredentials *)credentials withIdData:(nullable SFIdentityData *)identityData</Declaration>
			<Parameters>
				<Parameter>
					<Name>credentials</Name>
					<Abstract type="html">The credentials to apply</Abstract>
				</Parameter><Parameter>
					<Name>identityData</Name>
					<Abstract type="html">The identityData to apply</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applyCredentials:withIdData:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/applyCredentials:withIdData:andNotification:</TokenIdentifier>
			<Abstract type="html">Invoke this method to apply the specified credentials to the
a user whose credentials match. If no user exists, a new one is created.
This will post user update notification.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (SFUserAccount *)applyCredentials:(SFOAuthCredentials *)credentials withIdData:(SFIdentityData *)identityData andNotification:(BOOL)shouldSendNotification</Declaration>
			<Parameters>
				<Parameter>
					<Name>credentials</Name>
					<Abstract type="html">The credentials to apply</Abstract>
				</Parameter><Parameter>
					<Name>identityData</Name>
					<Abstract type="html">The identityData to apply</Abstract>
				</Parameter><Parameter>
					<Name>shouldSendNotification</Name>
					<Abstract type="html">whether to post notifications.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applyCredentials:withIdData:andNotification:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/applyIdData:forUser:</TokenIdentifier>
			<Abstract type="html">Invoke this method to apply the specified id data to the
  user. This will post user update notification.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)applyIdData:(SFIdentityData *)idData forUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>idData</Name>
					<Abstract type="html">The ID data to apply</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The SFUserAccount to apply this change to.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applyIdData:forUser:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/applyIdDataCustomAttributes:forUser:</TokenIdentifier>
			<Abstract type="html">This method will selectively update the custom attributes identity data for the  user.
Other identity data will not be impacted.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)applyIdDataCustomAttributes:(NSDictionary *)customAttributes forUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>customAttributes</Name>
					<Abstract type="html">The new custom attributes data to update in the identity data.</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The SFUserAccount to apply this change to.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applyIdDataCustomAttributes:forUser:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/applyIdDataCustomPermissions:forUser:</TokenIdentifier>
			<Abstract type="html">This method will selectively update the custom permissions identity data for the  user.
Other identity data will not be impacted.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)applyIdDataCustomPermissions:(NSDictionary *)customPermissions forUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>customPermissions</Name>
					<Abstract type="html">The new custom permissions data to update in the identity data.</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The SFUserAccount to apply this change to.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applyIdDataCustomPermissions:forUser:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setObjectForUserCustomData:forKey:andUser:</TokenIdentifier>
			<Abstract type="html">Apply custom data to the SFUserAccount that can be
accessed outside that user&apos;s sandbox. This data will be persisted
between launches and should only be used for non-sensitive information.
The NSDictionary should be NSCoder encodeable.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)setObjectForUserCustomData:(NSObject&lt;NSCoding&gt; *)object forKey:(NSString *)key andUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The NScoding enabled object to set</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key to retrieve this data for</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The SFUserAccount to apply this change to.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObjectForUserCustomData:forKey:andUser:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/switchToNewUser</TokenIdentifier>
			<Abstract type="html">Switches away from the current user, to a new user context.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)switchToNewUser</Declaration>
			
			
			<Anchor>//api/name/switchToNewUser</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/switchToUser:</TokenIdentifier>
			<Abstract type="html">Switches away from the current user, to the given user account.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)switchToUser:(nullable SFUserAccount *)newCurrentUser</Declaration>
			<Parameters>
				<Parameter>
					<Name>newCurrentUser</Name>
					<Abstract type="html">The user to switch to.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/switchToUser:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/userChanged:change:</TokenIdentifier>
			<Abstract type="html">Invoke this method to inform this manager that something has changed for the  user.</Abstract>
			<DeclaredIn>SFUserAccountManager.h</DeclaredIn>
			
			<Declaration>- (void)userChanged:(SFUserAccount *)user change:(SFUserAccountDataChange)change</Declaration>
			<Parameters>
				<Parameter>
					<Name>user</Name>
					<Abstract type="html">The user</Abstract>
				</Parameter><Parameter>
					<Name>change</Name>
					<Abstract type="html">The type of change (enum type). Use SFUserAccountDataChange.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/userChanged:change:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setDelegates:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nonnull) NSHashTable&lt;id&lt;SFUserAccountManagerDelegate&gt; &gt; *delegates</Declaration>
			
			
			<Anchor>//api/name/delegates</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/delegates</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nonnull) NSHashTable&lt;id&lt;SFUserAccountManagerDelegate&gt; &gt; *delegates</Declaration>
			
			
			<Anchor>//api/name/delegates</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/delegates</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nonnull) NSHashTable&lt;id&lt;SFUserAccountManagerDelegate&gt; &gt; *delegates</Declaration>
			
			
			<Anchor>//api/name/delegates</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setUserAccountMap:</TokenIdentifier>
			<Abstract type="html">A map of user accounts by user ID</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nonnull) NSMutableDictionary *userAccountMap</Declaration>
			
			
			<Anchor>//api/name/userAccountMap</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/userAccountMap</TokenIdentifier>
			<Abstract type="html">A map of user accounts by user ID</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nonnull) NSMutableDictionary *userAccountMap</Declaration>
			
			
			<Anchor>//api/name/userAccountMap</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/userAccountMap</TokenIdentifier>
			<Abstract type="html">A map of user accounts by user ID</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nonnull) NSMutableDictionary *userAccountMap</Declaration>
			
			
			<Anchor>//api/name/userAccountMap</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setLastChangedOrgId:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedOrgId</Declaration>
			
			
			<Anchor>//api/name/lastChangedOrgId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/lastChangedOrgId</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedOrgId</Declaration>
			
			
			<Anchor>//api/name/lastChangedOrgId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/lastChangedOrgId</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedOrgId</Declaration>
			
			
			<Anchor>//api/name/lastChangedOrgId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setLastChangedUserId:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedUserId</Declaration>
			
			
			<Anchor>//api/name/lastChangedUserId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/lastChangedUserId</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedUserId</Declaration>
			
			
			<Anchor>//api/name/lastChangedUserId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/lastChangedUserId</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedUserId</Declaration>
			
			
			<Anchor>//api/name/lastChangedUserId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setLastChangedCommunityId:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedCommunityId</Declaration>
			
			
			<Anchor>//api/name/lastChangedCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/lastChangedCommunityId</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedCommunityId</Declaration>
			
			
			<Anchor>//api/name/lastChangedCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/lastChangedCommunityId</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) NSString *lastChangedCommunityId</Declaration>
			
			
			<Anchor>//api/name/lastChangedCommunityId</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/setAccountPersister:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) id&lt;SFUserAccountPersister&gt; accountPersister</Declaration>
			
			
			<Anchor>//api/name/accountPersister</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/accountPersister</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) id&lt;SFUserAccountPersister&gt; accountPersister</Declaration>
			
			
			<Anchor>//api/name/accountPersister</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFUserAccountManager/accountPersister</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) id&lt;SFUserAccountPersister&gt; accountPersister</Declaration>
			
			
			<Anchor>//api/name/accountPersister</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/enumerateDelegates:</TokenIdentifier>
			<Abstract type="html">Executes the given block for each configured delegate.</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>- (void)enumerateDelegates:(nullable void ( ^ ) ( id&lt;SFUserAccountManagerDelegate&gt; _Nonnull ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute for each delegate.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enumerateDelegates:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/allExistingAccountNames</TokenIdentifier>
			<Abstract type="html">NSSet enumeration of all account Names</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>- (nullable NSSet *)allExistingAccountNames</Declaration>
			
			<ReturnValue><Abstract type="html">NSSet enumeration of all account Names</Abstract></ReturnValue>
			<Anchor>//api/name/allExistingAccountNames</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/uniqueUserAccountIdentifier:</TokenIdentifier>
			<Abstract type="html">Returns a unique identifier that can be used to create a new Account</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)uniqueUserAccountIdentifier:(nonnull NSString *)clientId</Declaration>
			<Parameters>
				<Parameter>
					<Name>clientId</Name>
					<Abstract type="html">OAuth Client Id</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A unique identifier</Abstract></ReturnValue>
			<Anchor>//api/name/uniqueUserAccountIdentifier:</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/reload</TokenIdentifier>
			<Abstract type="html">Reload the accounts and reset the state of SFUserAccountManager. Use for tests only</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>- (void)reload</Declaration>
			
			
			<Anchor>//api/name/reload</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFUserAccountManager/accountPersister</TokenIdentifier>
			<Abstract type="html">Get the Account Persister being used.</Abstract>
			<DeclaredIn>SFUserAccountManager+Internal.h</DeclaredIn>
			
			<Declaration>- (nullable id&lt;SFUserAccountPersister&gt;)accountPersister</Declaration>
			
			<ReturnValue><Abstract type="html">SFUserAccountPersister that is used.</Abstract></ReturnValue>
			<Anchor>//api/name/accountPersister</Anchor>
            <NodeRef refid="112"/>
		</Token>
		
        
        
	</File>
</Tokens>