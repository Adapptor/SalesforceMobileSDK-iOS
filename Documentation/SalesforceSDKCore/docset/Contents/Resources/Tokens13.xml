<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CSFOutput.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CSFOutput</TokenIdentifier>
			<Abstract type="html">The CSFOutput class declares the basis for all network responses.
Each response from REST APIs is a set of structured data describing the response to
a particular request.  Because this data is structured, the client-side representation
of these responses needs to be structured too. This class and its subclasses provide the
capability to encode and expose the data provided from server resources to client code.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
            
			
			<NodeRef refid="13"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/init</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/initWithJSON:context:</TokenIdentifier>
			<Abstract type="html">Designated initializer to construct a model object from its JSON representation.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithJSON:(NSDictionary *)json context:(NSDictionary *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>json</Name>
					<Abstract type="html">Dictionary of structured data from the network.</Abstract>
				</Parameter><Parameter>
					<Name>context</Name>
					<Abstract type="html">Dictionary of relevant information about the request and the action that performed it.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Initialized model object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithJSON:context:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/isEqualToOutput:</TokenIdentifier>
			<Abstract type="html">Returns a boolean value that indicates whether a given model object is equal to the receiver.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>- (BOOL)isEqualToOutput:(CSFOutput *)model</Declaration>
			<Parameters>
				<Parameter>
					<Name>model</Name>
					<Abstract type="html">The model object to compare to the receiver.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if model is equal to the receiver (if the properties of this and its child objects match), otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/isEqualToOutput:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/objectForKeyedSubscript:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>- (id)objectForKeyedSubscript:(id)key</Declaration>
			
			
			<Anchor>//api/name/objectForKeyedSubscript:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/setObject:forKeyedSubscript:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>- (void)setObject:(id)obj forKeyedSubscript:(id&lt;NSCopying&gt;)key</Declaration>
			
			
			<Anchor>//api/name/setObject:forKeyedSubscript:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/setParentObject:</TokenIdentifier>
			<Abstract type="html">This property exposes the parent object to the receiver, as a weak reference.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak, readwrite) NSObject *parentObject</Declaration>
			
			
			<Anchor>//api/name/parentObject</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/parentObject</TokenIdentifier>
			<Abstract type="html">This property exposes the parent object to the receiver, as a weak reference.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak, readwrite) NSObject *parentObject</Declaration>
			
			
			<Anchor>//api/name/parentObject</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CSFOutput/parentObject</TokenIdentifier>
			<Abstract type="html">This property exposes the parent object to the receiver, as a weak reference.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak, readwrite) NSObject *parentObject</Declaration>
			
			
			<Anchor>//api/name/parentObject</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/importAllProperties</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSFOutput_Internal.h</DeclaredIn>
			
			<Declaration>- (void)importAllProperties</Declaration>
			
			
			<Anchor>//api/name/importAllProperties</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/importSynthesizedProperties</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSFOutput_Internal.h</DeclaredIn>
			
			<Declaration>- (void)importSynthesizedProperties</Declaration>
			
			
			<Anchor>//api/name/importSynthesizedProperties</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/importProperty:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSFOutput_Internal.h</DeclaredIn>
			
			<Declaration>- (void)importProperty:(NSString *)propertyName</Declaration>
			
			
			<Anchor>//api/name/importProperty:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CSFOutput/storageKeyPathForPropertyName:</TokenIdentifier>
			<Abstract type="html">Returns the storage key used for JSON serialization for the given property name.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>+ (NSString *)storageKeyPathForPropertyName:(NSString *)propertyName</Declaration>
			<Parameters>
				<Parameter>
					<Name>propertyName</Name>
					<Abstract type="html">The name of the Objective-C property.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The storage key to use when serializing JSON.</Abstract></ReturnValue>
			<Anchor>//api/name/storageKeyPathForPropertyName:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CSFOutput/isDefaultPropertyForArray:</TokenIdentifier>
			<Abstract type="html">Returns a BOOL value indicating if the propertyName specified will store the contents of Array.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isDefaultPropertyForArray:(NSString *)propertyName</Declaration>
			<Parameters>
				<Parameter>
					<Name>propertyName</Name>
					<Abstract type="html">The name of the Objective-C property whose type will be NSArray.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">a BOOL value indicatind if the passed in property name is default.</Abstract></ReturnValue>
			<Anchor>//api/name/isDefaultPropertyForArray:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CSFOutput/actionModelForPropertyName:propertyClass:contents:</TokenIdentifier>
			<Abstract type="html">Returns the underlying class type for a dynamic property, if it isn&apos;t clear from the property description.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>+ (Class&lt;CSFActionModel&gt;)actionModelForPropertyName:(NSString *)propertyName propertyClass:(Class)originalClass contents:(id)contents</Declaration>
			
			<ReturnValue><Abstract type="html">Class conforming to CSFActionModel, or nil if the contents should not be composed as a CSFActionModel instance.</Abstract></ReturnValue>
			<Anchor>//api/name/actionModelForPropertyName:propertyClass:contents:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSFOutput/transformedValueForProperty:propertyClass:value:</TokenIdentifier>
			<Abstract type="html">Method used to transform an existing property to some other form on an as-needed basis.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>- (id)transformedValueForProperty:(NSString *)propertyName propertyClass:(Class)propertyClass value:(id)value</Declaration>
			
			<ReturnValue><Abstract type="html">Transformed value for the incoming property, or the original value if no transformation is needed.</Abstract></ReturnValue>
			<Anchor>//api/name/transformedValueForProperty:propertyClass:value:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CSFOutput/actionModelFormatterForPrimitiveProperty:encodingType:</TokenIdentifier>
			<Abstract type="html">Class method that returns a function pointer capable of transforming primitive values for the given encoding type.</Abstract>
			<DeclaredIn>CSFOutput.h</DeclaredIn>
			
			<Declaration>+ (CSFPrimitiveFormatterPtr)actionModelFormatterForPrimitiveProperty:(NSString *)propertyName encodingType:(const char *)encodingType</Declaration>
			
			<ReturnValue><Abstract type="html">Pointer to a C function capable of transforming this property to a primitive type.</Abstract></ReturnValue>
			<Anchor>//api/name/actionModelFormatterForPrimitiveProperty:encodingType:</Anchor>
            <NodeRef refid="13"/>
		</Token>
		
        
        
	</File>
</Tokens>