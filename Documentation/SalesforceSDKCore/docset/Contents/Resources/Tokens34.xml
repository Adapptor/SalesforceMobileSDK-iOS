<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFSmartStore.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFSmartStore</TokenIdentifier>
			<Abstract type="html">The NSError domain for SmartStore errors.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
            
			
			<NodeRef refid="34"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setStoreName:</TokenIdentifier>
			<Abstract type="html">The name of this store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) NSString *storeName</Declaration>
			
			
			<Anchor>//api/name/storeName</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/storeName</TokenIdentifier>
			<Abstract type="html">The name of this store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) NSString *storeName</Declaration>
			
			
			<Anchor>//api/name/storeName</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/storeName</TokenIdentifier>
			<Abstract type="html">The name of this store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, strong) NSString *storeName</Declaration>
			
			
			<Anchor>//api/name/storeName</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/sharedStoreWithName:</TokenIdentifier>
			<Abstract type="html">Use this method to obtain a shared store instance with a particular name for the current user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (id)sharedStoreWithName:(NSString *)storeName</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store.  If in doubt, use kDefaultSmartStoreName.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A shared instance of a store with the given name.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedStoreWithName:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/sharedStoreWithName:user:</TokenIdentifier>
			<Abstract type="html">Use this method to obtain a shared store instance with the given name for the given user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (id)sharedStoreWithName:(NSString *)storeName user:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store.  If in doubt, use kDefaultSmartStoreName.</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The user associated with the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sharedStoreWithName:user:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeSharedStoreWithName:</TokenIdentifier>
			<Abstract type="html">You may use this method to completely remove a persistent shared store with
the given name for the current user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeSharedStoreWithName:(NSString *)storeName</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSharedStoreWithName:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeSharedStoreWithName:forUser:</TokenIdentifier>
			<Abstract type="html">You may use this method to completely remove a persisted shared store with the given name
for the given user.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeSharedStoreWithName:(NSString *)storeName forUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>storeName</Name>
					<Abstract type="html">The name of the store to remove.</Abstract>
				</Parameter><Parameter>
					<Name>user</Name>
					<Abstract type="html">The user associated with the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSharedStoreWithName:forUser:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeAllStores</TokenIdentifier>
			<Abstract type="html">Removes all of the stores for the current user from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeAllStores</Declaration>
			
			
			<Anchor>//api/name/removeAllStores</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/removeAllStoresForUser:</TokenIdentifier>
			<Abstract type="html">Removes all of the store for the given user from this app.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>+ (void)removeAllStoresForUser:(SFUserAccount *)user</Declaration>
			<Parameters>
				<Parameter>
					<Name>user</Name>
					<Abstract type="html">The user associated with the stores to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeAllStoresForUser:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/indicesForSoup:</TokenIdentifier>
			<Abstract type="html">the name of the soup</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *)indicesForSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">the name of the soup</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSArray of SFSoupIndex for the given soup</Abstract></ReturnValue>
			<Anchor>//api/name/indicesForSoup:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/soupExists:</TokenIdentifier>
			<Abstract type="html">the name of the soup</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)soupExists:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">the name of the soup</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Does a soup with the given name already exist?</Abstract></ReturnValue>
			<Anchor>//api/name/soupExists:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/registerSoup:withIndexSpecs:</TokenIdentifier>
			<Abstract type="html">Ensure that a soup with the given name exists.
Either creates a new soup or returns an existing soup.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)registerSoup:(NSString *)soupName withIndexSpecs:(NSArray *)indexSpecs</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to register</Abstract>
				</Parameter><Parameter>
					<Name>indexSpecs</Name>
					<Abstract type="html">Array of one ore more IndexSpec objects as dictionaries</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the soup registered OK</Abstract></ReturnValue>
			<Anchor>//api/name/registerSoup:withIndexSpecs:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/countWithQuerySpec:</TokenIdentifier>
			<Abstract type="html">Get the number of entries that would be returned with the given query spec</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSUInteger)countWithQuerySpec:(SFQuerySpec *)querySpec</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">a native query spec</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/countWithQuerySpec:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/queryWithQuerySpec:withSoupName:</TokenIdentifier>
			<Abstract type="html">Search for entries matching the querySpec</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (SFStoreCursor *)queryWithQuerySpec:(NSDictionary *)querySpec withSoupName:(NSString *)targetSoupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">A querySpec as a dictionary</Abstract>
				</Parameter><Parameter>
					<Name>targetSoupName</Name>
					<Abstract type="html">the soup name targeted (not nil for exact/like/range queries)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A cursor</Abstract></ReturnValue>
			<Anchor>//api/name/queryWithQuerySpec:withSoupName:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/queryWithQuerySpec:pageIndex:</TokenIdentifier>
			<Abstract type="html">Search for entries matching the querySpec</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *)queryWithQuerySpec:(SFQuerySpec *)querySpec pageIndex:(NSUInteger)pageIndex</Declaration>
			<Parameters>
				<Parameter>
					<Name>querySpec</Name>
					<Abstract type="html">A native SFSoupQuerySpec</Abstract>
				</Parameter><Parameter>
					<Name>pageIndex</Name>
					<Abstract type="html">The page index to start the entries at (this supports paging)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A set of entries given the pageSize provided in the querySpec</Abstract></ReturnValue>
			<Anchor>//api/name/queryWithQuerySpec:pageIndex:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/retrieveEntries:fromSoup:</TokenIdentifier>
			<Abstract type="html">Search soup for entries exactly matching the soup entry IDs</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *)retrieveEntries:(NSArray *)soupEntryIds fromSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupEntryIds</Name>
					<Abstract type="html">An array of opaque soup entry IDs</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to query</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array with zero or more entries matching the input IDs. Order is not guaranteed.</Abstract></ReturnValue>
			<Anchor>//api/name/retrieveEntries:fromSoup:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/upsertEntries:toSoup:</TokenIdentifier>
			<Abstract type="html">Insert/update entries to the soup.  Insert vs. update will be determined by the internal
soup entry ID generated from intial entry.  If you want to specify a different identifier
for determining existing entries, use upsertEntries:toSoup:withExternalIdPath:</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *)upsertEntries:(NSArray *)entries toSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>entries</Name>
					<Abstract type="html">The entries to insert or update.</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to update.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The array of updated entries in the soup.</Abstract></ReturnValue>
			<Anchor>//api/name/upsertEntries:toSoup:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/upsertEntries:toSoup:withExternalIdPath:error:</TokenIdentifier>
			<Abstract type="html">Insert/update entries to the soup.  Insert vs. update will be determined by the specified
external ID path argument.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (NSArray *)upsertEntries:(NSArray *)entries toSoup:(NSString *)soupName withExternalIdPath:(NSString *)externalIdPath error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>entries</Name>
					<Abstract type="html">The entries to insert or update.</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to update.</Abstract>
				</Parameter><Parameter>
					<Name>externalIdPath</Name>
					<Abstract type="html">The user-defined query spec path used to determine insert vs. update.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">Sets/returns any error generated as part of the process.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The array of updated entries in the soup.</Abstract></ReturnValue>
			<Anchor>//api/name/upsertEntries:toSoup:withExternalIdPath:error:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeEntries:fromSoup:</TokenIdentifier>
			<Abstract type="html">Remove soup entries exactly matching the soup entry IDs</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)removeEntries:(NSArray *)entryIds fromSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>entryIds</Name>
					<Abstract type="html">An array of opaque soup entry IDs from _soupEntryId</Abstract>
				</Parameter><Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup from which to remove the soup entries</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeEntries:fromSoup:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeSoup:</TokenIdentifier>
			<Abstract type="html">Remove soup completely from the store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)removeSoup:(NSString *)soupName</Declaration>
			<Parameters>
				<Parameter>
					<Name>soupName</Name>
					<Abstract type="html">The name of the soup to remove from the store.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSoup:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/removeAllSoups</TokenIdentifier>
			<Abstract type="html">Remove all soups from the store.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (void)removeAllSoups</Declaration>
			
			
			<Anchor>//api/name/removeAllSoups</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/isFileDataProtectionActive</TokenIdentifier>
			<Abstract type="html">This is updated based on receiving notifications for
UIApplicationProtectedDataDidBecomeAvailable / UIApplicationProtectedDataWillBecomeUnavailable.
Note that on the simulator currently, data protection is NEVER active.</Abstract>
			<DeclaredIn>SFSmartStore.h</DeclaredIn>
			
			<Declaration>- (BOOL)isFileDataProtectionActive</Declaration>
			
			<ReturnValue><Abstract type="html">Are we sure that file data protection (full passcode-based encryption) is available?</Abstract></ReturnValue>
			<Anchor>//api/name/isFileDataProtectionActive</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setStoreQueue:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) FMDatabaseQueue *storeQueue</Declaration>
			
			
			<Anchor>//api/name/storeQueue</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/storeQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) FMDatabaseQueue *storeQueue</Declaration>
			
			
			<Anchor>//api/name/storeQueue</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/storeQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) FMDatabaseQueue *storeQueue</Declaration>
			
			
			<Anchor>//api/name/storeQueue</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setUser:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFUserAccount *user</Declaration>
			
			
			<Anchor>//api/name/user</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/user</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFUserAccount *user</Declaration>
			
			
			<Anchor>//api/name/user</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/user</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFUserAccount *user</Declaration>
			
			
			<Anchor>//api/name/user</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/setDbMgr:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFSmartStoreDatabaseManager *dbMgr</Declaration>
			
			
			<Anchor>//api/name/dbMgr</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/dbMgr</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFSmartStoreDatabaseManager *dbMgr</Declaration>
			
			
			<Anchor>//api/name/dbMgr</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSmartStore/dbMgr</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) SFSmartStoreDatabaseManager *dbMgr</Declaration>
			
			
			<Anchor>//api/name/dbMgr</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/initWithName:user:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (id)initWithName:(NSString *)name user:(SFUserAccount *)user</Declaration>
			
			
			<Anchor>//api/name/initWithName:user:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/openStoreDatabase</TokenIdentifier>
			<Abstract type="html">Simply open the db file.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)openStoreDatabase</Declaration>
			
			<ReturnValue><Abstract type="html">YES if we were able to open the DB file.</Abstract></ReturnValue>
			<Anchor>//api/name/openStoreDatabase</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/tableNameForSoup:withDb:</TokenIdentifier>
			<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSString *)tableNameForSoup:(NSString *)soupName withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The soup table name from SOUPNAMESTABLE, based on soup name.</Abstract></ReturnValue>
			<Anchor>//api/name/tableNameForSoup:withDb:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/insertIntoTable:values:withDb:</TokenIdentifier>
			<Abstract type="html">Helper method to insert values into an arbitrary table.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)insertIntoTable:(NSString *)tableName values:(NSDictionary *)map withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>tableName</Name>
					<Abstract type="html">The table to insert the data into.</Abstract>
				</Parameter><Parameter>
					<Name>map</Name>
					<Abstract type="html">A dictionary of key-value pairs to be inserted into table.</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the insert was successful, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/insertIntoTable:values:withDb:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/updateTable:values:entryId:withDb:</TokenIdentifier>
			<Abstract type="html">Helper method to update existing values in a table.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (BOOL)updateTable:(NSString *)tableName values:(NSDictionary *)map entryId:(NSNumber *)entryId withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>tableName</Name>
					<Abstract type="html">The name of the table to update.</Abstract>
				</Parameter><Parameter>
					<Name>entryId</Name>
					<Abstract type="html">The ID column used to determine what to update.</Abstract>
				</Parameter><Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter><Parameter>
					<Name>values</Name>
					<Abstract type="html">The column name/value mapping to update.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the update was successful, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/updateTable:values:entryId:withDb:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/columnNameForPath:inSoup:withDb:</TokenIdentifier>
			<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSString *)columnNameForPath:(NSString *)path inSoup:(NSString *)soupName withDb:(FMDatabase *)db</Declaration>
			<Parameters>
				<Parameter>
					<Name>db</Name>
					<Abstract type="html">This method is expected to be called from [fmdbqueue inDatabase:^(){ ... }]</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The map of an indexSpec path to a column name from SOUPINDEXMAP_TABLE.</Abstract></ReturnValue>
			<Anchor>//api/name/columnNameForPath:inSoup:withDb:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/encKey</TokenIdentifier>
			<Abstract type="html">The key used to encrypt the store.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>+ (NSString *)encKey</Declaration>
			
			<ReturnValue><Abstract type="html">The key used to encrypt the store.</Abstract></ReturnValue>
			<Anchor>//api/name/encKey</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSmartStore/clearSharedStoreMemoryState</TokenIdentifier>
			<Abstract type="html">FOR UNIT TESTING.  Removes all of the shared smart store objects from memory (persisted stores remain).</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)clearSharedStoreMemoryState</Declaration>
			
			
			<Anchor>//api/name/clearSharedStoreMemoryState</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSmartStore/convertSmartSql:</TokenIdentifier>
			<Abstract type="html">Convert smart sql to sql.</Abstract>
			<DeclaredIn>SFSmartStore+Internal.h</DeclaredIn>
			
			<Declaration>- (NSString *)convertSmartSql:(NSString *)smartSql</Declaration>
			<Parameters>
				<Parameter>
					<Name>smartSql</Name>
					<Abstract type="html">The smart sql to convert.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The sql.</Abstract></ReturnValue>
			<Anchor>//api/name/convertSmartSql:</Anchor>
            <NodeRef refid="34"/>
		</Token>
		
        
	</File>
</Tokens>