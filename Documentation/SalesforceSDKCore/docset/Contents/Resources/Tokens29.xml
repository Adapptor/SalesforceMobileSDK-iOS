<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFLogger.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFLogger</TokenIdentifier>
			<Abstract type="html">Generic logging utility: logs to both console and persistent file.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
            
			
			<NodeRef refid="29"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/logLevel</TokenIdentifier>
			<Abstract type="html">The current log level of the app.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (SFLogLevel)logLevel</Declaration>
			
			
			<Anchor>//api/name/logLevel</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/logToFile:</TokenIdentifier>
			<Abstract type="html">Turn on and off for logging to a file</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)logToFile:(BOOL)logToFile</Declaration>
			<Parameters>
				<Parameter>
					<Name>logToFile</Name>
					<Abstract type="html">Yes to log to file. Set to NO will turn off logging to file and also remove existing logging file</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/logToFile:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/setLogLevel:</TokenIdentifier>
			<Abstract type="html">Sets the log level of the app.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)setLogLevel:(SFLogLevel)newLevel</Declaration>
			<Parameters>
				<Parameter>
					<Name>newLevel</Name>
					<Abstract type="html">The new log level to configure.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLogLevel:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/logFileContents</TokenIdentifier>
			<Abstract type="html">Get access to the content of the application log file.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (NSString *)logFileContents</Declaration>
			
			
			<Anchor>//api/name/logFileContents</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/log:level:msg:</TokenIdentifier>
			<Abstract type="html">Logs at the Class level.  Should only be used if you don&apos;t have an NSObject instance to
log from.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)log:(Class)cls level:(SFLogLevel)level msg:(NSString *)msg</Declaration>
			<Parameters>
				<Parameter>
					<Name>cls</Name>
					<Abstract type="html">The class associated with the log event.</Abstract>
				</Parameter><Parameter>
					<Name>level</Name>
					<Abstract type="html">The level to log at.</Abstract>
				</Parameter><Parameter>
					<Name>msg</Name>
					<Abstract type="html">The message to log.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:level:msg:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/log:level:context:msg:</TokenIdentifier>
			<Abstract type="html">Logs at the Class level.  Should only be used if you don&apos;t have an NSObject instance to
log from.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)log:(Class)cls level:(SFLogLevel)level context:(SFLogContext)logContext msg:(NSString *)msg</Declaration>
			<Parameters>
				<Parameter>
					<Name>cls</Name>
					<Abstract type="html">The class associated with the log event.</Abstract>
				</Parameter><Parameter>
					<Name>level</Name>
					<Abstract type="html">The level to log at.</Abstract>
				</Parameter><Parameter>
					<Name>logContext</Name>
					<Abstract type="html">The context of the log</Abstract>
				</Parameter><Parameter>
					<Name>msg</Name>
					<Abstract type="html">The message to log.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:level:context:msg:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/logAssertionFailureInMethod:object:file:lineNumber:description:</TokenIdentifier>
			<Abstract type="html">Logs an assertion failure to a file.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)logAssertionFailureInMethod:(SEL)method object:(id)obj file:(NSString *)file lineNumber:(NSUInteger)line description:(NSString *)desc, ...</Declaration>
			<Parameters>
				<Parameter>
					<Name>method</Name>
					<Abstract type="html">The method where the assertion failure occurred.</Abstract>
				</Parameter><Parameter>
					<Name>obj</Name>
					<Abstract type="html">The object where the assertion failure occurred.</Abstract>
				</Parameter><Parameter>
					<Name>file</Name>
					<Abstract type="html">The file to log to.</Abstract>
				</Parameter><Parameter>
					<Name>line</Name>
					<Abstract type="html">The line number of the failure.</Abstract>
				</Parameter><Parameter>
					<Name>desc</Name>
					<Abstract type="html">The formatted description to log.</Abstract>
				</Parameter><Parameter>
					<Name>...</Name>
					<Abstract type="html">The format arguments of the description.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/logAssertionFailureInMethod:object:file:lineNumber:description:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/log:level:format:</TokenIdentifier>
			<Abstract type="html">Logs a formatted message with the given log level and format parameters.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)log:(Class)cls level:(SFLogLevel)level format:(NSString *)msg, ...</Declaration>
			<Parameters>
				<Parameter>
					<Name>cls</Name>
					<Abstract type="html">The class associated with the log event.</Abstract>
				</Parameter><Parameter>
					<Name>level</Name>
					<Abstract type="html">The minimum log level to log at.</Abstract>
				</Parameter><Parameter>
					<Name>msg</Name>
					<Abstract type="html">The format message, and optional arguments to expand in the format.</Abstract>
				</Parameter><Parameter>
					<Name>...</Name>
					<Abstract type="html">The arguments to the message format string.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:level:format:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/log:level:context:format:</TokenIdentifier>
			<Abstract type="html">Logs a formatted message with the given log level and format parameters.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)log:(Class)cls level:(SFLogLevel)level context:(SFLogContext)logContext format:(NSString *)msg, ...</Declaration>
			<Parameters>
				<Parameter>
					<Name>cls</Name>
					<Abstract type="html">The class associated with the log event.</Abstract>
				</Parameter><Parameter>
					<Name>level</Name>
					<Abstract type="html">The minimum log level to log at.</Abstract>
				</Parameter><Parameter>
					<Name>logContext</Name>
					<Abstract type="html">The context of the log</Abstract>
				</Parameter><Parameter>
					<Name>msg</Name>
					<Abstract type="html">The format message, and optional arguments to expand in the format.</Abstract>
				</Parameter><Parameter>
					<Name>...</Name>
					<Abstract type="html">The arguments to the message format string.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/log:level:context:format:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/applyLogLevelFromPreferences</TokenIdentifier>
			<Abstract type="html">Sets the log level based on the user preferences.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)applyLogLevelFromPreferences</Declaration>
			
			
			<Anchor>//api/name/applyLogLevelFromPreferences</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/setRecordAssertionEnabled:</TokenIdentifier>
			<Abstract type="html">Use this method to enable the recording of the assertion instead of aborting the
program when an assertion is triggered. This is usually used by the
unit tests.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)setRecordAssertionEnabled:(BOOL)enabled</Declaration>
			<Parameters>
				<Parameter>
					<Name>enabled</Name>
					<Abstract type="html">Whether or not to enable assertion recording.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setRecordAssertionEnabled:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/assertionRecordedAndClear</TokenIdentifier>
			<Abstract type="html">Returns YES if an assertion was recorded and clear the flag.</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (BOOL)assertionRecordedAndClear</Declaration>
			
			<ReturnValue><Abstract type="html">YES if an assertion was recorded, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/assertionRecordedAndClear</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/logLevelForString:</TokenIdentifier>
			<Abstract type="html">Return SFLogLevel for corresponding user readable string. Does
a case insensitive comparison against &quot;Verbose&quot;, &quot;Debug&quot;, &quot;Info&quot;, &quot;Warning&quot;, &quot;Error&quot;</Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (SFLogLevel)logLevelForString:(NSString *)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">One of the above strings</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Corresponding SFLogLevel value</Abstract></ReturnValue>
			<Anchor>//api/name/logLevelForString:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/setBlackListFilter</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)setBlackListFilter</Declaration>
			
			
			<Anchor>//api/name/setBlackListFilter</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/setWhiteListFilter</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)setWhiteListFilter</Declaration>
			
			
			<Anchor>//api/name/setWhiteListFilter</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/resetLoggingFilter</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)resetLoggingFilter</Declaration>
			
			
			<Anchor>//api/name/resetLoggingFilter</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/blackListFilterAddContext:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)blackListFilterAddContext:(SFLogContext)logContext</Declaration>
			
			
			<Anchor>//api/name/blackListFilterAddContext:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/blackListFilterRemoveContext:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)blackListFilterRemoveContext:(SFLogContext)logContext</Declaration>
			
			
			<Anchor>//api/name/blackListFilterRemoveContext:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/whiteListFilterAddContext:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)whiteListFilterAddContext:(SFLogContext)logContext</Declaration>
			
			
			<Anchor>//api/name/whiteListFilterAddContext:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/whiteListFilterRemoveContext:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)whiteListFilterRemoveContext:(SFLogContext)logContext</Declaration>
			
			
			<Anchor>//api/name/whiteListFilterRemoveContext:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/filterByContext:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (void)filterByContext:(SFLogContext)logContext</Declaration>
			
			
			<Anchor>//api/name/filterByContext:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/contextsOnBlackList</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)contextsOnBlackList</Declaration>
			
			
			<Anchor>//api/name/contextsOnBlackList</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/contextsOnWhiteList</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)contextsOnWhiteList</Declaration>
			
			
			<Anchor>//api/name/contextsOnWhiteList</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/isOnContextBlackList:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isOnContextBlackList:(SFLogContext)logContext</Declaration>
			
			
			<Anchor>//api/name/isOnContextBlackList:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFLogger/isOnContextWhiteList:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFLogger.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isOnContextWhiteList:(SFLogContext)logContext</Declaration>
			
			
			<Anchor>//api/name/isOnContextWhiteList:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
        
        
	</File>
</Tokens>