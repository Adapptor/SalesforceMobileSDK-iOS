<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFSDKCryptoUtils.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFSDKCryptoUtils</TokenIdentifier>
			<Abstract type="html">Various utility methods in support of cryptographic operations.</Abstract>
			<DeclaredIn>SFSDKCryptoUtils.h</DeclaredIn>
			
			<NodeRef refid="29"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSDKCryptoUtils/randomByteDataWithLength:</TokenIdentifier>
			<Abstract type="html">Creates a random string of bytes (based on arc4random() generation) and returns
them as an NSData object.</Abstract>
			<DeclaredIn>SFSDKCryptoUtils.h</DeclaredIn>			
			
			<Declaration>+ (NSData *)randomByteDataWithLength:(NSUInteger)lengthInBytes</Declaration>
			<Parameters>
				<Parameter>
					<Name>lengthInBytes</Name>
					<Abstract type="html">The number of bytes to generate.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The string of random bytes, as an NSData object.</Abstract></ReturnValue>
			<Anchor>//api/name/randomByteDataWithLength:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSDKCryptoUtils/createPBKDF2DerivedKey:</TokenIdentifier>
			<Abstract type="html">Creates a PBKDF2 derived key from an input key (string), using default values for the
random-generated salt data and its length, the number of derivation rounds, and the
derived key length.</Abstract>
			<DeclaredIn>SFSDKCryptoUtils.h</DeclaredIn>			
			
			<Declaration>+ (SFPBKDFData *)createPBKDF2DerivedKey:(NSString *)stringToHash</Declaration>
			<Parameters>
				<Parameter>
					<Name>stringToHash</Name>
					<Abstract type="html">The plaintext string used to generate the key.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An SFPBKDFData object representing the derived key.</Abstract></ReturnValue>
			<Anchor>//api/name/createPBKDF2DerivedKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSDKCryptoUtils/createPBKDF2DerivedKey:salt:derivationRounds:keyLength:</TokenIdentifier>
			<Abstract type="html">Creates a PBKDF2 derived key from an input key (string), a salt, number of derivation
rounds, and desired derived key length.</Abstract>
			<DeclaredIn>SFSDKCryptoUtils.h</DeclaredIn>			
			
			<Declaration>+ (SFPBKDFData *)createPBKDF2DerivedKey:(NSString *)stringToHash salt:(NSData *)salt derivationRounds:(NSUInteger)numDerivationRounds keyLength:(NSUInteger)derivedKeyLength</Declaration>
			<Parameters>
				<Parameter>
					<Name>stringToHash</Name>
					<Abstract type="html">The base string to use for the derived key.</Abstract>
				</Parameter><Parameter>
					<Name>salt</Name>
					<Abstract type="html">The salt to append to the string.</Abstract>
				</Parameter><Parameter>
					<Name>derivationRounds</Name>
					<Abstract type="html">The number of derivation rounds used to generate the key.</Abstract>
				</Parameter><Parameter>
					<Name>keyLength</Name>
					<Abstract type="html">The desired derived key length.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An SFPBKDFData object representing the derived key.</Abstract></ReturnValue>
			<Anchor>//api/name/createPBKDF2DerivedKey:salt:derivationRounds:keyLength:</Anchor>
		</Token>
		
	</File>
</Tokens>