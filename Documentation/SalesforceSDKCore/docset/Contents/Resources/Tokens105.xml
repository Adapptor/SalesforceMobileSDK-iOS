<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFSecurityLockout.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFSecurityLockout</TokenIdentifier>
			<Abstract type="html">This class interacts with the inactivity timer.
It is responsible for locking and unlocking the device by presenting the passcode modal controller when the timer expires.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
            
			
			<NodeRef refid="105"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/addDelegate:</TokenIdentifier>
			<Abstract type="html">Adds a delegate to the list of SFSecurityLockout delegates.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)addDelegate:(id&lt;SFSecurityLockoutDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The delegate to add to the list.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addDelegate:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/removeDelegate:</TokenIdentifier>
			<Abstract type="html">Removes a delegate from the list of SFSecurityLockout delegates.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)removeDelegate:(id&lt;SFSecurityLockoutDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The delegate to remove from the list.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeDelegate:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lockoutTime</TokenIdentifier>
			<Abstract type="html">Get the current lockout time, in seconds</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (NSUInteger)lockoutTime</Declaration>
			
			
			<Anchor>//api/name/lockoutTime</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/passcodeLength</TokenIdentifier>
			<Abstract type="html">Gets the configured passcode length.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (NSInteger)passcodeLength</Declaration>
			
			<ReturnValue><Abstract type="html">The minimum passcode length.</Abstract></ReturnValue>
			<Anchor>//api/name/passcodeLength</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setPasscodeLength:lockoutTime:</TokenIdentifier>
			<Abstract type="html">Set the passcode length and lockout time.  This asynchronous method will trigger passcode creation
or passcode change, when necessary.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setPasscodeLength:(NSInteger)newPasscodeLength lockoutTime:(NSUInteger)newLockoutTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>newPasscodeLength</Name>
					<Abstract type="html">The new passcode length to configure.  This can only be greater than or equal
to the currently configured length, to support the most restrictive passcode policy across users.</Abstract>
				</Parameter><Parameter>
					<Name>newLockoutTime</Name>
					<Abstract type="html">The new lockout time to configure.  This can only be less than the currently
configured time, to support the most restrictive passcode policy across users.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPasscodeLength:lockoutTime:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/clearPasscodeState</TokenIdentifier>
			<Abstract type="html">Resets the passcode state of the app, if there aren&apos;t other users with an overriding passcode
policy.  I.e. passcode state can only be cleared if the current user is the only user who would
be subject to that policy.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)clearPasscodeState</Declaration>
			
			
			<Anchor>//api/name/clearPasscodeState</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setupTimer</TokenIdentifier>
			<Abstract type="html">Initialize the timer</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setupTimer</Declaration>
			
			
			<Anchor>//api/name/setupTimer</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/removeTimer</TokenIdentifier>
			<Abstract type="html">Unregister and invalidate the timer</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)removeTimer</Declaration>
			
			
			<Anchor>//api/name/removeTimer</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/validateTimer</TokenIdentifier>
			<Abstract type="html">Validate the timer upon app entering the foreground</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)validateTimer</Declaration>
			
			
			<Anchor>//api/name/validateTimer</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/isLockoutEnabled</TokenIdentifier>
			<Abstract type="html">Check if passcode is enabled.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isLockoutEnabled</Declaration>
			
			<ReturnValue><Abstract type="html">YES if passcode is enabled and required.</Abstract></ReturnValue>
			<Anchor>//api/name/isLockoutEnabled</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/inactivityExpired</TokenIdentifier>
			<Abstract type="html">Indicates if the inactivity period has expired.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (BOOL)inactivityExpired</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the inactivity timeout has expired, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/inactivityExpired</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/startActivityMonitoring</TokenIdentifier>
			<Abstract type="html">Starts monitoring for user activity, to determine activity expiration and passcode screen display.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)startActivityMonitoring</Declaration>
			
			
			<Anchor>//api/name/startActivityMonitoring</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/stopActivityMonitoring</TokenIdentifier>
			<Abstract type="html">Stops monitoring for user activity.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)stopActivityMonitoring</Declaration>
			
			
			<Anchor>//api/name/stopActivityMonitoring</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lock</TokenIdentifier>
			<Abstract type="html">Lock the device immediately.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)lock</Declaration>
			
			
			<Anchor>//api/name/lock</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/unlock:action:passcodeConfig:</TokenIdentifier>
			<Abstract type="html">Unlock the device</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)unlock:(BOOL)success action:(SFSecurityLockoutAction)action passcodeConfig:(SFPasscodeConfigurationData)configData</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">Whether the device is being unlocked as the result of a successful passcode
challenge, as opposed to unlocking to reset the application to to a failed challenge.</Abstract>
				</Parameter><Parameter>
					<Name>action</Name>
					<Abstract type="html">In a successful challenge, what was the action taken?</Abstract>
				</Parameter><Parameter>
					<Name>configData</Name>
					<Abstract type="html">The round-trip passcode configuration data used to create or update the passcode.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unlock:action:passcodeConfig:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setIsLocked:</TokenIdentifier>
			<Abstract type="html">Toggle the locked state</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setIsLocked:(BOOL)locked</Declaration>
			<Parameters>
				<Parameter>
					<Name>locked</Name>
					<Abstract type="html">Locks the device if YES, otherwise unlocks the device.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setIsLocked:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/locked</TokenIdentifier>
			<Abstract type="html">Check if device is locked</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (BOOL)locked</Declaration>
			
			
			<Anchor>//api/name/locked</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/isPasscodeValid</TokenIdentifier>
			<Abstract type="html">Check if the passcode is valid</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isPasscodeValid</Declaration>
			
			
			<Anchor>//api/name/isPasscodeValid</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/isPasscodeNeeded</TokenIdentifier>
			<Abstract type="html">Check to see if the passcode screen is needed.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isPasscodeNeeded</Declaration>
			
			
			<Anchor>//api/name/isPasscodeNeeded</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setCanShowPasscode:</TokenIdentifier>
			<Abstract type="html">Show the passcode view. Used by unit tests.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setCanShowPasscode:(BOOL)showPasscode</Declaration>
			<Parameters>
				<Parameter>
					<Name>showPasscode</Name>
					<Abstract type="html">If YES, passcode view can be displayed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCanShowPasscode:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setLockScreenSuccessCallbackBlock:</TokenIdentifier>
			<Abstract type="html">Sets the callback block to be called on any action that triggers screen lock, and unlocks
successfully.  Optional.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setLockScreenSuccessCallbackBlock:(SFLockScreenSuccessCallbackBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be executed on successful unlock.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLockScreenSuccessCallbackBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lockScreenSuccessCallbackBlock</TokenIdentifier>
			<Abstract type="html">Returns the callback block to be executed on successful screen unlock.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (SFLockScreenSuccessCallbackBlock)lockScreenSuccessCallbackBlock</Declaration>
			
			
			<Anchor>//api/name/lockScreenSuccessCallbackBlock</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setLockScreenFailureCallbackBlock:</TokenIdentifier>
			<Abstract type="html">Sets the callback block to be called on any action that triggers screen lock, and fails to
verify the passcode to unlock the screen.  Optional.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setLockScreenFailureCallbackBlock:(SFLockScreenFailureCallbackBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be executed on a failed unlock.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLockScreenFailureCallbackBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lockScreenFailureCallbackBlock</TokenIdentifier>
			<Abstract type="html">Returns the callback block to be executed on a screen unlock failure.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (SFLockScreenFailureCallbackBlock)lockScreenFailureCallbackBlock</Declaration>
			
			
			<Anchor>//api/name/lockScreenFailureCallbackBlock</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/passcodeViewControllerCreationBlock</TokenIdentifier>
			<Abstract type="html">The block used to create the passcode view controller</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (SFPasscodeViewControllerCreationBlock)passcodeViewControllerCreationBlock</Declaration>
			
			<ReturnValue><Abstract type="html">The block used to create the passcode view controller</Abstract></ReturnValue>
			<Anchor>//api/name/passcodeViewControllerCreationBlock</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setPasscodeViewControllerCreationBlock:</TokenIdentifier>
			<Abstract type="html">Sets the block that will create the passcode view controller.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setPasscodeViewControllerCreationBlock:(SFPasscodeViewControllerCreationBlock)vcBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>vcBlock</Name>
					<Abstract type="html">The passcode view controller creation block to use.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPasscodeViewControllerCreationBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/presentPasscodeViewControllerBlock</TokenIdentifier>
			<Abstract type="html">The block used to present the passcode view controller.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (SFPasscodeViewControllerPresentationBlock)presentPasscodeViewControllerBlock</Declaration>
			
			<ReturnValue><Abstract type="html">The block used to present the passcode view controller.</Abstract></ReturnValue>
			<Anchor>//api/name/presentPasscodeViewControllerBlock</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setPresentPasscodeViewControllerBlock:</TokenIdentifier>
			<Abstract type="html">Sets the block that will present the passcode view controller.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setPresentPasscodeViewControllerBlock:(SFPasscodeViewControllerPresentationBlock)vcBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>vcBlock</Name>
					<Abstract type="html">The block to use to present the passcode view controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPresentPasscodeViewControllerBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/dismissPasscodeViewControllerBlock</TokenIdentifier>
			<Abstract type="html">The block used to dismiss the passcode view controller.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (SFPasscodeViewControllerPresentationBlock)dismissPasscodeViewControllerBlock</Declaration>
			
			<ReturnValue><Abstract type="html">The block used to dismiss the passcode view controller.</Abstract></ReturnValue>
			<Anchor>//api/name/dismissPasscodeViewControllerBlock</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setDismissPasscodeViewControllerBlock:</TokenIdentifier>
			<Abstract type="html">Set the block that will dismiss the passcode view controller.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setDismissPasscodeViewControllerBlock:(SFPasscodeViewControllerPresentationBlock)vcBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>vcBlock</Name>
					<Abstract type="html">The block defined to dismiss the passcode view controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDismissPasscodeViewControllerBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setPasscodeViewController:</TokenIdentifier>
			<Abstract type="html">* Sets a retained instance of the current passcode view controller that&apos;s displayed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)setPasscodeViewController:(UIViewController *)vc</Declaration>
			<Parameters>
				<Parameter>
					<Name>vc</Name>
					<Abstract type="html">The passcode view controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPasscodeViewController:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/passcodeViewController</TokenIdentifier>
			<Abstract type="html">Returns the currently displayed passcode view controller, or nil if the passcode view controller
is not currently displayed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (UIViewController *)passcodeViewController</Declaration>
			
			
			<Anchor>//api/name/passcodeViewController</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setForcePasscodeDisplay:</TokenIdentifier>
			<Abstract type="html">Whether to force the passcode screen to be displayed, despite sanity conditions for whether passcodes
are configured.  This method is only useful for unit test code, and the value should otherwise be left
to its default value of NO.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (void)setForcePasscodeDisplay:(BOOL)forceDisplay</Declaration>
			<Parameters>
				<Parameter>
					<Name>forceDisplay</Name>
					<Abstract type="html">Whether to force the passcode screen to be displayed.  Default value is NO.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setForcePasscodeDisplay:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/forcePasscodeDisplay</TokenIdentifier>
			<Abstract type="html">Whether or not the app is configured to force the display of the passcode screen.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (BOOL)forcePasscodeDisplay</Declaration>
			
			<ReturnValue><Abstract type="html">Whether or not the app is configured to force the display of the passcode screen.</Abstract></ReturnValue>
			<Anchor>//api/name/forcePasscodeDisplay</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/validatePasscodeAtStartup</TokenIdentifier>
			<Abstract type="html">Whether or not to validate the passcode at app startup.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<Declaration>+ (BOOL)validatePasscodeAtStartup</Declaration>
			
			<ReturnValue><Abstract type="html">Whether or not to validate the passcode at app startup.</Abstract></ReturnValue>
			<Anchor>//api/name/validatePasscodeAtStartup</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/timerExpired:</TokenIdentifier>
			<Abstract type="html">Called when the user activity timer expires.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)timerExpired:(NSTimer *)theTimer</Declaration>
			
			
			<Anchor>//api/name/timerExpired:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/presentPasscodeController:passcodeConfig:</TokenIdentifier>
			<Abstract type="html">Presents the passcode controller when it&apos;s time to create or verify the passcode.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)presentPasscodeController:(SFPasscodeControllerMode)modeValue passcodeConfig:(SFPasscodeConfigurationData)configData</Declaration>
			
			
			<Anchor>//api/name/presentPasscodeController:passcodeConfig:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/passcodeScreenIsPresent</TokenIdentifier>
			<Abstract type="html">Whether or not the passcode screen is currently displayed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (BOOL)passcodeScreenIsPresent</Declaration>
			
			
			<Anchor>//api/name/passcodeScreenIsPresent</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/cancelPasscodeScreen</TokenIdentifier>
			<Abstract type="html">Closes/dismisses the passcode screen, if it&apos;s visible.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)cancelPasscodeScreen</Declaration>
			
			
			<Anchor>//api/name/cancelPasscodeScreen</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/hasValidSession</TokenIdentifier>
			<Abstract type="html">Whether or not the app currently has a valid authenticated session.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (BOOL)hasValidSession</Declaration>
			
			
			<Anchor>//api/name/hasValidSession</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/unlockSuccessPostProcessing:</TokenIdentifier>
			<Abstract type="html">Runs in the event of a successful passcode unlock.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)unlockSuccessPostProcessing:(SFSecurityLockoutAction)action</Declaration>
			<Parameters>
				<Parameter>
					<Name>action</Name>
					<Abstract type="html">The action taken, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unlockSuccessPostProcessing:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/unlockFailurePostProcessing</TokenIdentifier>
			<Abstract type="html">Runs in the event that a passcode unlock attempt failed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)unlockFailurePostProcessing</Declaration>
			
			
			<Anchor>//api/name/unlockFailurePostProcessing</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/sendPasscodeFlowWillBeginNotification:</TokenIdentifier>
			<Abstract type="html">Generate the notification for the beginning of the passcode flow.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)sendPasscodeFlowWillBeginNotification:(SFPasscodeControllerMode)mode</Declaration>
			<Parameters>
				<Parameter>
					<Name>mode</Name>
					<Abstract type="html">The controller mode (create vs. verify) associated with the passcode flow.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendPasscodeFlowWillBeginNotification:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/sendPasscodeFlowCompletedNotification:</TokenIdentifier>
			<Abstract type="html">Generate the notification for the completion of the passcode flow.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)sendPasscodeFlowCompletedNotification:(BOOL)validationSuccess</Declaration>
			<Parameters>
				<Parameter>
					<Name>validationSuccess</Name>
					<Abstract type="html">Whether the passcode validation was successful or not.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendPasscodeFlowCompletedNotification:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setLockoutTimeInternal:</TokenIdentifier>
			<Abstract type="html">FOR UNIT TESTS ONLY: Sets the lockout time directly, without accompanying business logic.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)setLockoutTimeInternal:(NSUInteger)seconds</Declaration>
			<Parameters>
				<Parameter>
					<Name>seconds</Name>
					<Abstract type="html">The number of seconds for the lockout time.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLockoutTimeInternal:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/readLockoutTimeFromKeychain</TokenIdentifier>
			<Abstract type="html">Retrieves the lockout time value from the keychain.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (NSNumber *)readLockoutTimeFromKeychain</Declaration>
			
			<ReturnValue><Abstract type="html">NSNumber wrapping the NSUInteger value for lockout time, or nil if not set.</Abstract></ReturnValue>
			<Anchor>//api/name/readLockoutTimeFromKeychain</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/writeLockoutTimeToKeychain:</TokenIdentifier>
			<Abstract type="html">Writes the lockout time to the keychain.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)writeLockoutTimeToKeychain:(NSNumber *)lockoutTime</Declaration>
			<Parameters>
				<Parameter>
					<Name>lockoutTime</Name>
					<Abstract type="html">The NSNumber wrapping the NSUInteger value to be written to the keychain.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/writeLockoutTimeToKeychain:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/readIsLockedFromKeychain</TokenIdentifier>
			<Abstract type="html">Retreives the &quot;is locked&quot; setting from the keychain.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (NSNumber *)readIsLockedFromKeychain</Declaration>
			
			<ReturnValue><Abstract type="html">The NSNumber wrapping the BOOL value for &quot;is locked&quot;, or nil if not set.</Abstract></ReturnValue>
			<Anchor>//api/name/readIsLockedFromKeychain</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/writeIsLockedToKeychain:</TokenIdentifier>
			<Abstract type="html">Writes the &quot;is locked&quot; value to the keychain.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)writeIsLockedToKeychain:(NSNumber *)locked</Declaration>
			<Parameters>
				<Parameter>
					<Name>locked</Name>
					<Abstract type="html">The NSNumber wrapping the BOOL value for &quot;is locked&quot;.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/writeIsLockedToKeychain:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/upgradeSettings</TokenIdentifier>
			<Abstract type="html">Upgrades settings as part of SFSecurityLockout initialization.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)upgradeSettings</Declaration>
			
			
			<Anchor>//api/name/upgradeSettings</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/enumerateDelegates:</TokenIdentifier>
			<Abstract type="html">Runs the given block of code against the list of security lockout delegates.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>
			
			<Declaration>+ (void)enumerateDelegates:(void ( ^ ) ( id&lt;SFSecurityLockoutDelegate&gt; delegate ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block of code to execute for each delegate.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enumerateDelegates:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
        
        
	</File>
</Tokens>