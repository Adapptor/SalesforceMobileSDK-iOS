<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFSecurityLockout.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFSecurityLockout</TokenIdentifier>
			<Abstract type="html">This class interacts with the inactivity timer.
It is responsible for locking and unlocking the device by presenting the passcode modal controller when the timer expires.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>
			
			<NodeRef refid="35"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lockoutTime</TokenIdentifier>
			<Abstract type="html">Get the current lockout time, in seconds</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (NSUInteger)lockoutTime</Declaration>
			
			
			<Anchor>//api/name/lockoutTime</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setLockoutTime:</TokenIdentifier>
			<Abstract type="html">Set the lockout timer.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setLockoutTime:(NSUInteger)seconds</Declaration>
			<Parameters>
				<Parameter>
					<Name>seconds</Name>
					<Abstract type="html">The number of seconds for the timer to wait before locking.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLockoutTime:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setupTimer</TokenIdentifier>
			<Abstract type="html">Initialize the timer</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setupTimer</Declaration>
			
			
			<Anchor>//api/name/setupTimer</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/removeTimer</TokenIdentifier>
			<Abstract type="html">Unregister and invalidate the timer</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)removeTimer</Declaration>
			
			
			<Anchor>//api/name/removeTimer</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/validateTimer</TokenIdentifier>
			<Abstract type="html">Validate the timer upon app entering the foreground</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)validateTimer</Declaration>
			
			
			<Anchor>//api/name/validateTimer</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/isLockoutEnabled</TokenIdentifier>
			<Abstract type="html">Check if passcode is enabled.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)isLockoutEnabled</Declaration>
			
			<ReturnValue><Abstract type="html">YES if passcode is enabled and required.</Abstract></ReturnValue>
			<Anchor>//api/name/isLockoutEnabled</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/inactivityExpired</TokenIdentifier>
			<Abstract type="html">Indicates if the inactivity period has expired.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)inactivityExpired</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the inactivity timeout has expired, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/inactivityExpired</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lock</TokenIdentifier>
			<Abstract type="html">Lock the device immediately.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)lock</Declaration>
			
			
			<Anchor>//api/name/lock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/unlock:</TokenIdentifier>
			<Abstract type="html">Unlock the device</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)unlock:(BOOL)success</Declaration>
			<Parameters>
				<Parameter>
					<Name>success</Name>
					<Abstract type="html">Whether the device is being unlocked as the result of a successful passcode
challenge, as opposed to unlocking to reset the application to to a failed challenge.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setIsLocked:</TokenIdentifier>
			<Abstract type="html">Toggle the locked state</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setIsLocked:(BOOL)locked</Declaration>
			<Parameters>
				<Parameter>
					<Name>locked</Name>
					<Abstract type="html">Locks the device if YES, otherwise unlocks the device.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setIsLocked:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/locked</TokenIdentifier>
			<Abstract type="html">Check if device is locked</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)locked</Declaration>
			
			
			<Anchor>//api/name/locked</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/isPasscodeValid</TokenIdentifier>
			<Abstract type="html">Check if the passcode is valid</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)isPasscodeValid</Declaration>
			
			
			<Anchor>//api/name/isPasscodeValid</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setPasscode:</TokenIdentifier>
			<Abstract type="html">Set the passcode</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setPasscode:(NSString *)passcode</Declaration>
			<Parameters>
				<Parameter>
					<Name>passcode</Name>
					<Abstract type="html">The passcode to set.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPasscode:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setPasscodeLength:</TokenIdentifier>
			<Abstract type="html">Set the required length of the passcode.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setPasscodeLength:(NSInteger)passcodeLength</Declaration>
			<Parameters>
				<Parameter>
					<Name>passcodeLength</Name>
					<Abstract type="html">The required length of the passcode.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPasscodeLength:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setCanShowPasscode:</TokenIdentifier>
			<Abstract type="html">Show the passcode view. Used by unit tests.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setCanShowPasscode:(BOOL)showPasscode</Declaration>
			
			
			<Anchor>//api/name/setCanShowPasscode:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setLockScreenSuccessCallbackBlock:</TokenIdentifier>
			<Abstract type="html">Sets the callback block to be called on any action that triggers screen lock, and unlocks
successfully.  Optional.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setLockScreenSuccessCallbackBlock:(SFLockScreenCallbackBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be executed on successful unlock.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLockScreenSuccessCallbackBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lockScreenSuccessCallbackBlock</TokenIdentifier>
			<Abstract type="html">Returns the callback block to be executed on successful screen unlock.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (SFLockScreenCallbackBlock)lockScreenSuccessCallbackBlock</Declaration>
			
			
			<Anchor>//api/name/lockScreenSuccessCallbackBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setLockScreenFailureCallbackBlock:</TokenIdentifier>
			<Abstract type="html">Sets the callback block to be called on any action that triggers screen lock, and fails to
verify the passcode to unlock the screen.  Optional.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (void)setLockScreenFailureCallbackBlock:(SFLockScreenCallbackBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be executed on a failed unlock.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLockScreenFailureCallbackBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/lockScreenFailureCallbackBlock</TokenIdentifier>
			<Abstract type="html">Returns the callback block to be executed on a screen unlock failure.</Abstract>
			<DeclaredIn>SFSecurityLockout.h</DeclaredIn>			
			
			<Declaration>+ (SFLockScreenCallbackBlock)lockScreenFailureCallbackBlock</Declaration>
			
			
			<Anchor>//api/name/lockScreenFailureCallbackBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/timerExpired:</TokenIdentifier>
			<Abstract type="html">Called when the user activity timer expires.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)timerExpired:(NSTimer *)theTimer</Declaration>
			
			
			<Anchor>//api/name/timerExpired:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/presentPasscodeController:</TokenIdentifier>
			<Abstract type="html">Presents the passcode controller when it&apos;s time to create or verify the passcode.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)presentPasscodeController:(SFPasscodeControllerMode)modeValue</Declaration>
			
			
			<Anchor>//api/name/presentPasscodeController:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setPasscodeViewController:</TokenIdentifier>
			<Abstract type="html">Sets a retained instance of the current passcode view controller that&apos;s displayed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)setPasscodeViewController:(UIViewController *)vc</Declaration>
			
			
			<Anchor>//api/name/setPasscodeViewController:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/passcodeViewController</TokenIdentifier>
			<Abstract type="html">Returns the currently displayed passcode view controller, or nil if the passcode view controller
is not currently displayed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (UIViewController *)passcodeViewController</Declaration>
			
			
			<Anchor>//api/name/passcodeViewController</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/passcodeScreenIsPresent</TokenIdentifier>
			<Abstract type="html">Whether or not the passcode screen is currently displayed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)passcodeScreenIsPresent</Declaration>
			
			
			<Anchor>//api/name/passcodeScreenIsPresent</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/hasValidSession</TokenIdentifier>
			<Abstract type="html">Whether or not the app currently has a valid authenticated session.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (BOOL)hasValidSession</Declaration>
			
			
			<Anchor>//api/name/hasValidSession</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/unlockSuccessPostProcessing</TokenIdentifier>
			<Abstract type="html">Runs in the event of a successful passcode unlock.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)unlockSuccessPostProcessing</Declaration>
			
			
			<Anchor>//api/name/unlockSuccessPostProcessing</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/unlockFailurePostProcessing</TokenIdentifier>
			<Abstract type="html">Runs in the event that a passcode unlock attempt failed.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)unlockFailurePostProcessing</Declaration>
			
			
			<Anchor>//api/name/unlockFailurePostProcessing</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/sendPasscodeFlowWillBeginNotification:</TokenIdentifier>
			<Abstract type="html">Generate the notification for the beginning of the passcode flow.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)sendPasscodeFlowWillBeginNotification:(SFPasscodeControllerMode)mode</Declaration>
			<Parameters>
				<Parameter>
					<Name>mode</Name>
					<Abstract type="html">The controller mode (create vs. verify) associated with the passcode flow.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendPasscodeFlowWillBeginNotification:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/sendPasscodeFlowCompletedNotification:</TokenIdentifier>
			<Abstract type="html">Generate the notification for the completion of the passcode flow.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)sendPasscodeFlowCompletedNotification:(BOOL)validationSuccess</Declaration>
			<Parameters>
				<Parameter>
					<Name>validationSuccess</Name>
					<Abstract type="html">Whether the passcode validation was successful or not.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendPasscodeFlowCompletedNotification:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSecurityLockout/setLockoutTimeInternal:</TokenIdentifier>
			<Abstract type="html">FOR UNIT TESTS ONLY: Sets the lockout time directly, without accompanying business logic.</Abstract>
			<DeclaredIn>SFSecurityLockout+Internal.h</DeclaredIn>			
			
			<Declaration>+ (void)setLockoutTimeInternal:(NSUInteger)seconds</Declaration>
			<Parameters>
				<Parameter>
					<Name>seconds</Name>
					<Abstract type="html">The number of seconds for the lockout time.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLockoutTimeInternal:</Anchor>
		</Token>
		
	</File>
</Tokens>