<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SFSDKSafeMutableSet.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SFSDKSafeMutableSet</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
            
			
			<NodeRef refid="10"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/anyObject</TokenIdentifier>
			<Abstract type="html">Adds a given object to the set, if it is not already a member.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (id)anyObject</Declaration>
			
			
			<Anchor>//api/name/anyObject</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/containsObject:</TokenIdentifier>
			<Abstract type="html">Returns true if the object exists in the set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (BOOL)containsObject:(id)anObject</Declaration>
			
			
			<Anchor>//api/name/containsObject:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/addObject:</TokenIdentifier>
			<Abstract type="html">Adds a given object to the set, if it is not already a member.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)addObject:(id)obj</Declaration>
			
			
			<Anchor>//api/name/addObject:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/addObjectsFromArray:</TokenIdentifier>
			<Abstract type="html">Adds to the set each object contained in a given array that is not already a member.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)addObjectsFromArray:(NSArray *)array</Declaration>
			
			
			<Anchor>//api/name/addObjectsFromArray:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/removeAllObjects</TokenIdentifier>
			<Abstract type="html">Removes all objects from the set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)removeAllObjects</Declaration>
			
			
			<Anchor>//api/name/removeAllObjects</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/removeObject:</TokenIdentifier>
			<Abstract type="html">Removes a given object from the set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)removeObject:(id)object</Declaration>
			
			
			<Anchor>//api/name/removeObject:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/unionSet:</TokenIdentifier>
			<Abstract type="html">Removes each object in another given set from the receiving set, if present.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)unionSet:(NSSet *)otherSet</Declaration>
			
			
			<Anchor>//api/name/unionSet:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/minusSet:</TokenIdentifier>
			<Abstract type="html">Empties the receiving set, then adds each object contained in another given set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)minusSet:(NSSet *)set</Declaration>
			
			
			<Anchor>//api/name/minusSet:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/intersectSet:</TokenIdentifier>
			<Abstract type="html">Empties the receiving set, then adds each object contained in another given set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)intersectSet:(NSSet *)otherSet</Declaration>
			
			
			<Anchor>//api/name/intersectSet:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/setSet:</TokenIdentifier>
			<Abstract type="html">Empties the receiving set, then adds each object contained in another given set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)setSet:(NSSet *)otherSet</Declaration>
			
			
			<Anchor>//api/name/setSet:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/filterUsingPredicate:</TokenIdentifier>
			<Abstract type="html">Filter the set using a predicate.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)filterUsingPredicate:(NSPredicate *)predicate</Declaration>
			
			
			<Anchor>//api/name/filterUsingPredicate:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/enumerateObjectsUsingBlock:</TokenIdentifier>
			<Abstract type="html">Enumerate objects in the set safely, using a block.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (void)enumerateObjectsUsingBlock:(void ( ^ ) ( id obj , BOOL *stop ))block</Declaration>
			
			
			<Anchor>//api/name/enumerateObjectsUsingBlock:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/asSet</TokenIdentifier>
			<Abstract type="html">Get a NSSet from the mutable set</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (NSSet *)asSet</Declaration>
			
			
			<Anchor>//api/name/asSet</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/allObjects</TokenIdentifier>
			<Abstract type="html">Return an Array of all Objects</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (NSArray *)allObjects</Declaration>
			
			
			<Anchor>//api/name/allObjects</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/isEqualToSet:</TokenIdentifier>
			<Abstract type="html">Returns true if the sets are equal.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>- (BOOL)isEqualToSet:(SFSDKSafeMutableSet *)otherSet</Declaration>
			
			
			<Anchor>//api/name/isEqualToSet:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/setCount:</TokenIdentifier>
			<Abstract type="html">The number of elements in this set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SFSDKSafeMutableSet/count</TokenIdentifier>
			<Abstract type="html">The number of elements in this set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/SFSDKSafeMutableSet/count</TokenIdentifier>
			<Abstract type="html">The number of elements in this set.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSUInteger count</Declaration>
			
			
			<Anchor>//api/name/count</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSDKSafeMutableSet/set</TokenIdentifier>
			<Abstract type="html">A convenience method to allocate and initialize a new instance of a SFSDKSafeMutableSet.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>+ (id)set</Declaration>
			
			<ReturnValue><Abstract type="html">A new SFSDKSafeMutableSet instance.</Abstract></ReturnValue>
			<Anchor>//api/name/set</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/SFSDKSafeMutableSet/setWithCapacity:</TokenIdentifier>
			<Abstract type="html">A convenience method to allocate and initialize a new instance of a SFSDKSafeMutableSetWithCapacity.</Abstract>
			<DeclaredIn>SFSDKSafeMutableSet.h</DeclaredIn>
			
			<Declaration>+ (id)setWithCapacity:(NSUInteger)numItems</Declaration>
			
			<ReturnValue><Abstract type="html">A new SFSDKSafeMutableSet instance.</Abstract></ReturnValue>
			<Anchor>//api/name/setWithCapacity:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
        
        
	</File>
</Tokens>