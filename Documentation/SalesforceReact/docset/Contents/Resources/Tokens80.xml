<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RCTImageLoader.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RCTImageLoader</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
            
			
			<NodeRef refid="80"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/setMaxConcurrentLoadingTasks:</TokenIdentifier>
			<Abstract type="html">The maximum number of concurrent image loading tasks. Loading and decoding
images can consume a lot of memory, so setting this to a higher value may
cause memory to spike. If you are seeing out-of-memory crashes, try reducing
this value.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentLoadingTasks</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentLoadingTasks</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/maxConcurrentLoadingTasks</TokenIdentifier>
			<Abstract type="html">The maximum number of concurrent image loading tasks. Loading and decoding
images can consume a lot of memory, so setting this to a higher value may
cause memory to spike. If you are seeing out-of-memory crashes, try reducing
this value.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentLoadingTasks</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentLoadingTasks</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTImageLoader/maxConcurrentLoadingTasks</TokenIdentifier>
			<Abstract type="html">The maximum number of concurrent image loading tasks. Loading and decoding
images can consume a lot of memory, so setting this to a higher value may
cause memory to spike. If you are seeing out-of-memory crashes, try reducing
this value.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentLoadingTasks</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentLoadingTasks</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/setMaxConcurrentDecodingTasks:</TokenIdentifier>
			<Abstract type="html">The maximum number of concurrent image decoding tasks. Decoding large
images can be especially CPU and memory intensive, so if your are decoding a
lot of large images in your app, you may wish to adjust this value.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentDecodingTasks</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentDecodingTasks</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/maxConcurrentDecodingTasks</TokenIdentifier>
			<Abstract type="html">The maximum number of concurrent image decoding tasks. Decoding large
images can be especially CPU and memory intensive, so if your are decoding a
lot of large images in your app, you may wish to adjust this value.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentDecodingTasks</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentDecodingTasks</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTImageLoader/maxConcurrentDecodingTasks</TokenIdentifier>
			<Abstract type="html">The maximum number of concurrent image decoding tasks. Decoding large
images can be especially CPU and memory intensive, so if your are decoding a
lot of large images in your app, you may wish to adjust this value.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentDecodingTasks</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentDecodingTasks</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/setMaxConcurrentDecodingBytes:</TokenIdentifier>
			<Abstract type="html">Decoding large images can use a lot of memory, and potentially cause the app
to crash. This value allows you to throttle the amount of memory used by the
decoder independently of the number of concurrent threads. This means you can
still decode a lot of small images in parallel, without allowing the decoder
to try to decompress multiple huge images at once. Note that this value is
only a hint, and not an indicator of the total memory used by the app.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentDecodingBytes</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentDecodingBytes</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/maxConcurrentDecodingBytes</TokenIdentifier>
			<Abstract type="html">Decoding large images can use a lot of memory, and potentially cause the app
to crash. This value allows you to throttle the amount of memory used by the
decoder independently of the number of concurrent threads. This means you can
still decode a lot of small images in parallel, without allowing the decoder
to try to decompress multiple huge images at once. Note that this value is
only a hint, and not an indicator of the total memory used by the app.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentDecodingBytes</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentDecodingBytes</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTImageLoader/maxConcurrentDecodingBytes</TokenIdentifier>
			<Abstract type="html">Decoding large images can use a lot of memory, and potentially cause the app
to crash. This value allows you to throttle the amount of memory used by the
decoder independently of the number of concurrent threads. This means you can
still decode a lot of small images in parallel, without allowing the decoder
to try to decompress multiple huge images at once. Note that this value is
only a hint, and not an indicator of the total memory used by the app.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSUInteger maxConcurrentDecodingBytes</Declaration>
			
			
			<Anchor>//api/name/maxConcurrentDecodingBytes</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/init</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/initWithRedirectDelegate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithRedirectDelegate:(id&lt;RCTImageRedirectProtocol&gt;)redirectDelegate</Declaration>
			
			
			<Anchor>//api/name/initWithRedirectDelegate:</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/loadImageWithURLRequest:callback:</TokenIdentifier>
			<Abstract type="html">Loads the specified image at the highest available resolution.
Can be called from any thread, will call back on an unspecified thread.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>- (RCTImageLoaderCancellationBlock)loadImageWithURLRequest:(NSURLRequest *)imageURLRequest callback:(RCTImageLoaderCompletionBlock)callback</Declaration>
			
			
			<Anchor>//api/name/loadImageWithURLRequest:callback:</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/loadImageWithURLRequest:size:scale:clipped:resizeMode:progressBlock:partialLoadBlock:completionBlock:</TokenIdentifier>
			<Abstract type="html">As above, but includes target size, scale and resizeMode, which are used to
select the optimal dimensions for the loaded image. The clipped option
controls whether the image will be clipped to fit the specified size exactly,
or if the original aspect ratio should be retained.
partialLoadBlock is meant for custom image loaders that do not ship with the core RN library.
It is meant to be called repeatedly while loading the image as higher quality versions are decoded,
for instance with progressive JPEGs.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>- (RCTImageLoaderCancellationBlock)loadImageWithURLRequest:(NSURLRequest *)imageURLRequest size:(CGSize)size scale:(CGFloat)scale clipped:(BOOL)clipped resizeMode:(RCTResizeMode)resizeMode progressBlock:(RCTImageLoaderProgressBlock)progressBlock partialLoadBlock:(RCTImageLoaderPartialLoadBlock)partialLoadBlock completionBlock:(RCTImageLoaderCompletionBlock)completionBlock</Declaration>
			
			
			<Anchor>//api/name/loadImageWithURLRequest:size:scale:clipped:resizeMode:progressBlock:partialLoadBlock:completionBlock:</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/decodeImageData:size:scale:clipped:resizeMode:completionBlock:</TokenIdentifier>
			<Abstract type="html">Finds an appropriate image decoder and passes the target size, scale and
resizeMode for optimal image decoding.  The clipped option controls
whether the image will be clipped to fit the specified size exactly, or
if the original aspect ratio should be retained. Can be called from any
thread, will call callback on an unspecified thread.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>- (RCTImageLoaderCancellationBlock)decodeImageData:(NSData *)imageData size:(CGSize)size scale:(CGFloat)scale clipped:(BOOL)clipped resizeMode:(RCTResizeMode)resizeMode completionBlock:(RCTImageLoaderCompletionBlock)completionBlock</Declaration>
			
			
			<Anchor>//api/name/decodeImageData:size:scale:clipped:resizeMode:completionBlock:</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/getImageSizeForURLRequest:block:</TokenIdentifier>
			<Abstract type="html">Get image size, in pixels. This method will do the least work possible to get
the information, and won&apos;t decode the image if it doesn&apos;t have to.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>- (RCTImageLoaderCancellationBlock)getImageSizeForURLRequest:(NSURLRequest *)imageURLRequest block:(void ( ^ ) ( NSError *error , CGSize size ))completionBlock</Declaration>
			
			
			<Anchor>//api/name/getImageSizeForURLRequest:block:</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTImageLoader/setImageCache:</TokenIdentifier>
			<Abstract type="html">Allows developers to set their own caching implementation for
decoded images as long as it conforms to the RCTImageCacheDelegate
protocol. This method should be called in bridgeDidInitializeModule.</Abstract>
			<DeclaredIn>RCTImageLoader.h</DeclaredIn>
			
			<Declaration>- (void)setImageCache:(id&lt;RCTImageCache&gt;)cache</Declaration>
			
			
			<Anchor>//api/name/setImageCache:</Anchor>
            <NodeRef refid="80"/>
		</Token>
		
        
        
	</File>
</Tokens>