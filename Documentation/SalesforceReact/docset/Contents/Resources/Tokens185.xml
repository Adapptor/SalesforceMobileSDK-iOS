<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RCTSurface.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RCTSurface</TokenIdentifier>
			<Abstract type="html">RCTSurface instance represents React Native-powered piece of a user interface
which can be a full-screen app, separate modal view controller,
or even small widget.
It is called &quot;Surface&quot;.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
            
			
			<NodeRef refid="185"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setStage:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) RCTSurfaceStage stage</Declaration>
			
			
			<Anchor>//api/name/stage</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/stage</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) RCTSurfaceStage stage</Declaration>
			
			
			<Anchor>//api/name/stage</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/stage</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) RCTSurfaceStage stage</Declaration>
			
			
			<Anchor>//api/name/stage</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setBridge:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/bridge</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/bridge</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setModuleName:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) NSString *moduleName</Declaration>
			
			
			<Anchor>//api/name/moduleName</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/moduleName</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) NSString *moduleName</Declaration>
			
			
			<Anchor>//api/name/moduleName</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/moduleName</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) NSString *moduleName</Declaration>
			
			
			<Anchor>//api/name/moduleName</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setRootViewTag:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) NSNumber *rootViewTag</Declaration>
			
			
			<Anchor>//api/name/rootViewTag</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/rootViewTag</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) NSNumber *rootViewTag</Declaration>
			
			
			<Anchor>//api/name/rootViewTag</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/rootViewTag</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readonly) NSNumber *rootViewTag</Declaration>
			
			
			<Anchor>//api/name/rootViewTag</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setDelegate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readwrite, weak, nullable) id&lt;RCTSurfaceDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/delegate</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readwrite, weak, nullable) id&lt;RCTSurfaceDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/delegate</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, readwrite, weak, nullable) id&lt;RCTSurfaceDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setProperties:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, copy, readwrite) NSDictionary *properties</Declaration>
			
			
			<Anchor>//api/name/properties</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/properties</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, copy, readwrite) NSDictionary *properties</Declaration>
			
			
			<Anchor>//api/name/properties</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/properties</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, copy, readwrite) NSDictionary *properties</Declaration>
			
			
			<Anchor>//api/name/properties</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/initWithBridge:moduleName:initialProperties:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithBridge:(RCTBridge *)bridge moduleName:(NSString *)moduleName initialProperties:(NSDictionary *)initialProperties</Declaration>
			
			
			<Anchor>//api/name/initWithBridge:moduleName:initialProperties:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/view</TokenIdentifier>
			<Abstract type="html">Creates (if needed) and returns UIView instance which represents the Surface.
The Surface will cache and retain this object.
Returning the UIView instance does not mean that the Surface is ready
to execute and layout. It can be just a handler which Surface will use later
to mount the actual views.
RCTSurface does not control (or influence in any way) the size or origin
of this view. Some superview (or another owner) must use other methods
of this class to setup proper layout and interop interactions with UIKit
or another UI framework.
This method must be called only from the main queue.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (RCTSurfaceView *)view</Declaration>
			
			
			<Anchor>//api/name/view</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setMinimumSize:maximumSize:</TokenIdentifier>
			<Abstract type="html">Sets minimumSize and maximumSize layout constraints for the Surface.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (void)setMinimumSize:(CGSize)minimumSize maximumSize:(CGSize)maximumSize</Declaration>
			
			
			<Anchor>//api/name/setMinimumSize:maximumSize:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setMinimumSize:</TokenIdentifier>
			<Abstract type="html">Previously set minimumSize layout constraint.
Defaults to {0, 0}.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize minimumSize</Declaration>
			
			
			<Anchor>//api/name/minimumSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/minimumSize</TokenIdentifier>
			<Abstract type="html">Previously set minimumSize layout constraint.
Defaults to {0, 0}.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize minimumSize</Declaration>
			
			
			<Anchor>//api/name/minimumSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/minimumSize</TokenIdentifier>
			<Abstract type="html">Previously set minimumSize layout constraint.
Defaults to {0, 0}.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize minimumSize</Declaration>
			
			
			<Anchor>//api/name/minimumSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setMaximumSize:</TokenIdentifier>
			<Abstract type="html">Previously set maximumSize layout constraint.
Defaults to {CGFLOATMAX, CGFLOATMAX}.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize maximumSize</Declaration>
			
			
			<Anchor>//api/name/maximumSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/maximumSize</TokenIdentifier>
			<Abstract type="html">Previously set maximumSize layout constraint.
Defaults to {CGFLOATMAX, CGFLOATMAX}.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize maximumSize</Declaration>
			
			
			<Anchor>//api/name/maximumSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/maximumSize</TokenIdentifier>
			<Abstract type="html">Previously set maximumSize layout constraint.
Defaults to {CGFLOATMAX, CGFLOATMAX}.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize maximumSize</Declaration>
			
			
			<Anchor>//api/name/maximumSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setSize:</TokenIdentifier>
			<Abstract type="html">Simple shortcut to -[RCTSurface setMinimumSize:size maximumSize:size].</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (void)setSize:(CGSize)size</Declaration>
			
			
			<Anchor>//api/name/setSize:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/sizeThatFitsMinimumSize:maximumSize:</TokenIdentifier>
			<Abstract type="html">Measures the Surface with given constraints.
This method does not cause any side effects on the surface object.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (CGSize)sizeThatFitsMinimumSize:(CGSize)minimumSize maximumSize:(CGSize)maximumSize</Declaration>
			
			
			<Anchor>//api/name/sizeThatFitsMinimumSize:maximumSize:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/setIntrinsicSize:</TokenIdentifier>
			<Abstract type="html">Return the current size of the root view based on (but not clamp by) current
size constraints.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize intrinsicSize</Declaration>
			
			
			<Anchor>//api/name/intrinsicSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/intrinsicSize</TokenIdentifier>
			<Abstract type="html">Return the current size of the root view based on (but not clamp by) current
size constraints.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize intrinsicSize</Declaration>
			
			
			<Anchor>//api/name/intrinsicSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurface/intrinsicSize</TokenIdentifier>
			<Abstract type="html">Return the current size of the root view based on (but not clamp by) current
size constraints.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>@property (atomic, assign, readonly) CGSize intrinsicSize</Declaration>
			
			
			<Anchor>//api/name/intrinsicSize</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/synchronouslyWaitForStage:timeout:</TokenIdentifier>
			<Abstract type="html">Synchronously blocks the current thread up to given timeout until
the Surface reaches stage.
Limitations:
- Do nothing, if called on UIManager queue.
- Calling on the main queue with RCTSurfaceStageSurfaceDidInitialMounting
stage temporary is not supported; in this case the stage will be
downgraded to RCTSurfaceStageSurfaceDidInitialLayout.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (BOOL)synchronouslyWaitForStage:(RCTSurfaceStage)stage timeout:(NSTimeInterval)timeout</Declaration>
			
			
			<Anchor>//api/name/synchronouslyWaitForStage:timeout:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/mountReactComponentWithBridge:moduleName:params:</TokenIdentifier>
			<Abstract type="html">Mount the React component specified by the given moduleName. This is typically
calling runApplication.js from the native side.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (void)mountReactComponentWithBridge:(RCTBridge *)bridge moduleName:(NSString *)moduleName params:(NSDictionary *)params</Declaration>
			
			
			<Anchor>//api/name/mountReactComponentWithBridge:moduleName:params:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/unmountReactComponentWithBridge:rootViewTag:</TokenIdentifier>
			<Abstract type="html">Unmount the React component specified by the given rootViewTag, called from native.</Abstract>
			<DeclaredIn>RCTSurface.h</DeclaredIn>
			
			<Declaration>- (void)unmountReactComponentWithBridge:(RCTBridge *)bridge rootViewTag:(NSNumber *)rootViewTag</Declaration>
			
			
			<Anchor>//api/name/unmountReactComponentWithBridge:rootViewTag:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/dealloc</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)dealloc</Declaration>
			
			
			<Anchor>//api/name/dealloc</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_batchedBridge</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (RCTBridge *)_batchedBridge</Declaration>
			
			
			<Anchor>//api/name/_batchedBridge</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_uiManager</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (RCTUIManager *)_uiManager</Declaration>
			
			
			<Anchor>//api/name/_uiManager</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_mountRootViewIfNeeded</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)_mountRootViewIfNeeded</Declaration>
			
			
			<Anchor>//api/name/_mountRootViewIfNeeded</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/handleBridgeWillLoadJavaScriptNotification:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)handleBridgeWillLoadJavaScriptNotification:(NSNotification *)notification</Declaration>
			
			
			<Anchor>//api/name/handleBridgeWillLoadJavaScriptNotification:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/handleBridgeDidLoadJavaScriptNotification:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)handleBridgeDidLoadJavaScriptNotification:(NSNotification *)notification</Declaration>
			
			
			<Anchor>//api/name/handleBridgeDidLoadJavaScriptNotification:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_setStage:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)_setStage:(RCTSurfaceStage)stage</Declaration>
			
			
			<Anchor>//api/name/_setStage:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_propagateStageChange:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)_propagateStageChange:(RCTSurfaceStage)stage</Declaration>
			
			
			<Anchor>//api/name/_propagateStageChange:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_run</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)_run</Declaration>
			
			
			<Anchor>//api/name/_run</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_stop</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)_stop</Declaration>
			
			
			<Anchor>//api/name/_stop</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/_registerRootView</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)_registerRootView</Declaration>
			
			
			<Anchor>//api/name/_registerRootView</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/rootShadowView:didChangeIntrinsicSize:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)rootShadowView:(RCTRootShadowView *)rootShadowView didChangeIntrinsicSize:(CGSize)intrinsicSize</Declaration>
			
			
			<Anchor>//api/name/rootShadowView:didChangeIntrinsicSize:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/rootShadowViewDidStartRendering:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)rootShadowViewDidStartRendering:(RCTSurfaceRootShadowView *)rootShadowView</Declaration>
			
			
			<Anchor>//api/name/rootShadowViewDidStartRendering:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/rootShadowViewDidStartLayingOut:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)rootShadowViewDidStartLayingOut:(RCTSurfaceRootShadowView *)rootShadowView</Declaration>
			
			
			<Anchor>//api/name/rootShadowViewDidStartLayingOut:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/uiManager:performMountingWithBlock:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (BOOL)uiManager:(RCTUIManager *)manager performMountingWithBlock:(RCTUIManagerMountingBlock)block</Declaration>
			
			
			<Anchor>//api/name/uiManager:performMountingWithBlock:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurface/uiManagerDidPerformMounting:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurface.mm</DeclaredIn>
			
			<Declaration>- (void)uiManagerDidPerformMounting:(RCTUIManager *)manager</Declaration>
			
			
			<Anchor>//api/name/uiManagerDidPerformMounting:</Anchor>
            <NodeRef refid="185"/>
		</Token>
		
        
        
	</File>
</Tokens>