<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RCTEventEmitter.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RCTEventEmitter</TokenIdentifier>
			<Abstract type="html">RCTEventEmitter is an abstract base class to be used for modules that emit
events to be observed by JS.</Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
            
			
			<NodeRef refid="65"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/setBridge:</TokenIdentifier>
			<Abstract type="html">A reference to the RCTBridge. Useful for modules that require access
to bridge features, such as sending events or making JS calls. This
will be set automatically by the bridge when it initializes the module.
To implement this in your module, just add @synthesize bridge = _bridge;</Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/bridge</TokenIdentifier>
			<Abstract type="html">A reference to the RCTBridge. Useful for modules that require access
to bridge features, such as sending events or making JS calls. This
will be set automatically by the bridge when it initializes the module.
To implement this in your module, just add @synthesize bridge = _bridge;</Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTEventEmitter/bridge</TokenIdentifier>
			<Abstract type="html">A reference to the RCTBridge. Useful for modules that require access
to bridge features, such as sending events or making JS calls. This
will be set automatically by the bridge when it initializes the module.
To implement this in your module, just add @synthesize bridge = _bridge;</Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/supportedEvents</TokenIdentifier>
			<Abstract type="html">Override this method to return an array of supported event names. Attempting
to observe or send an event that isn&apos;t included in this list will result in
an error.</Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;NSString*&gt; *)supportedEvents</Declaration>
			
			
			<Anchor>//api/name/supportedEvents</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/sendEventWithName:body:</TokenIdentifier>
			<Abstract type="html">Send an event that does not relate to a specific view, e.g. a navigation
or data update notification.</Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>- (void)sendEventWithName:(NSString *)name body:(id)body</Declaration>
			
			
			<Anchor>//api/name/sendEventWithName:body:</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/startObserving</TokenIdentifier>
			<Abstract type="html">These methods will be called when the first observer is added and when the
last observer is removed (or when dealloc is called), respectively. These
should be overridden in your subclass in order to start/stop sending events.</Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>- (void)startObserving</Declaration>
			
			
			<Anchor>//api/name/startObserving</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/stopObserving</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>- (void)stopObserving</Declaration>
			
			
			<Anchor>//api/name/stopObserving</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/addListener:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>- (void)addListener:(NSString *)eventName</Declaration>
			
			
			<Anchor>//api/name/addListener:</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTEventEmitter/removeListeners:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTEventEmitter.h</DeclaredIn>
			
			<Declaration>- (void)removeListeners:(double)count</Declaration>
			
			
			<Anchor>//api/name/removeListeners:</Anchor>
            <NodeRef refid="65"/>
		</Token>
		
        
        
	</File>
</Tokens>