<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RCTSurfaceHostingView.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RCTSurfaceHostingView</TokenIdentifier>
			<Abstract type="html">UIView subclass which providers interoperability between UIKit and
Surface regarding layout and life-cycle.
This class can be used as easy-to-use general purpose integration point
of ReactNative-powered experiences in UIKit based apps.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
            
			
			<NodeRef refid="192"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/init</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/initWithSurface:</TokenIdentifier>
			<Abstract type="html">Designated initializer.
Instanciates a view with given Surface object.
Note: The view retains the surface object.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithSurface:(RCTSurface *)surface</Declaration>
			
			
			<Anchor>//api/name/initWithSurface:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/createSurfaceWithBridge:moduleName:initialProperties:</TokenIdentifier>
			<Abstract type="html">Create an instance of RCTSurface to be hosted.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>- (RCTSurface *)createSurfaceWithBridge:(RCTBridge *)bridge moduleName:(NSString *)moduleName initialProperties:(NSDictionary *)initialProperties</Declaration>
			
			
			<Anchor>//api/name/createSurfaceWithBridge:moduleName:initialProperties:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setFrame:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)setFrame:(CGRect)frame</Declaration>
			
			
			<Anchor>//api/name/setFrame:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/intrinsicContentSize</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (CGSize)intrinsicContentSize</Declaration>
			
			
			<Anchor>//api/name/intrinsicContentSize</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/sizeThatFits:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (CGSize)sizeThatFits:(CGSize)size</Declaration>
			
			
			<Anchor>//api/name/sizeThatFits:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setStage:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)setStage:(RCTSurfaceStage)stage</Declaration>
			
			
			<Anchor>//api/name/setStage:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setSizeMeasureMode:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)setSizeMeasureMode:(RCTSurfaceSizeMeasureMode)sizeMeasureMode</Declaration>
			
			
			<Anchor>//api/name/setSizeMeasureMode:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setIsActivityIndicatorViewVisible:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)setIsActivityIndicatorViewVisible:(BOOL)visible</Declaration>
			
			
			<Anchor>//api/name/setIsActivityIndicatorViewVisible:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setIsSurfaceViewVisible:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)setIsSurfaceViewVisible:(BOOL)visible</Declaration>
			
			
			<Anchor>//api/name/setIsSurfaceViewVisible:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setActivityIndicatorViewFactory:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)setActivityIndicatorViewFactory:(RCTSurfaceHostingViewActivityIndicatorViewFactory)activityIndicatorViewFactory</Declaration>
			
			
			<Anchor>//api/name/setActivityIndicatorViewFactory:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/_invalidateLayout</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)_invalidateLayout</Declaration>
			
			
			<Anchor>//api/name/_invalidateLayout</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/_updateViews</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)_updateViews</Declaration>
			
			
			<Anchor>//api/name/_updateViews</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/didMoveToWindow</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)didMoveToWindow</Declaration>
			
			
			<Anchor>//api/name/didMoveToWindow</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/surface:didChangeStage:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)surface:(RCTSurface *)surface didChangeStage:(RCTSurfaceStage)stage</Declaration>
			
			
			<Anchor>//api/name/surface:didChangeStage:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/surface:didChangeIntrinsicSize:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>- (void)surface:(RCTSurface *)surface didChangeIntrinsicSize:(CGSize)intrinsicSize</Declaration>
			
			
			<Anchor>//api/name/surface:didChangeIntrinsicSize:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/initWithBridge:moduleName:initialProperties:</TokenIdentifier>
			<Abstract type="html">Convenience initializer.
Instanciates a Surface object with given bridge, moduleName, and
initialProperties, and then use it to instanciate a view.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithBridge:(RCTBridge *)bridge moduleName:(NSString *)moduleName initialProperties:(NSDictionary *)initialProperties</Declaration>
			
			
			<Anchor>//api/name/initWithBridge:moduleName:initialProperties:</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setSurface:</TokenIdentifier>
			<Abstract type="html">Surface object which is currently using to power the view.
Read-only.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RCTSurface *surface</Declaration>
			
			
			<Anchor>//api/name/surface</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/surface</TokenIdentifier>
			<Abstract type="html">Surface object which is currently using to power the view.
Read-only.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RCTSurface *surface</Declaration>
			
			
			<Anchor>//api/name/surface</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurfaceHostingView/surface</TokenIdentifier>
			<Abstract type="html">Surface object which is currently using to power the view.
Read-only.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RCTSurface *surface</Declaration>
			
			
			<Anchor>//api/name/surface</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setSizeMeasureMode:</TokenIdentifier>
			<Abstract type="html">Size measure mode which are defining relationship between UIKit and ReactNative
layout approaches.
Defaults to RCTSurfaceSizeMeasureModeWidthAtMost | RCTSurfaceSizeMeasureModeHeightAtMost.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RCTSurfaceSizeMeasureMode sizeMeasureMode</Declaration>
			
			
			<Anchor>//api/name/sizeMeasureMode</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/sizeMeasureMode</TokenIdentifier>
			<Abstract type="html">Size measure mode which are defining relationship between UIKit and ReactNative
layout approaches.
Defaults to RCTSurfaceSizeMeasureModeWidthAtMost | RCTSurfaceSizeMeasureModeHeightAtMost.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RCTSurfaceSizeMeasureMode sizeMeasureMode</Declaration>
			
			
			<Anchor>//api/name/sizeMeasureMode</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurfaceHostingView/sizeMeasureMode</TokenIdentifier>
			<Abstract type="html">Size measure mode which are defining relationship between UIKit and ReactNative
layout approaches.
Defaults to RCTSurfaceSizeMeasureModeWidthAtMost | RCTSurfaceSizeMeasureModeHeightAtMost.</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RCTSurfaceSizeMeasureMode sizeMeasureMode</Declaration>
			
			
			<Anchor>//api/name/sizeMeasureMode</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setActivityIndicatorViewFactory:</TokenIdentifier>
			<Abstract type="html">Activity indicator factory.
A hosting view may use this block to instantiate and display custom activity
(loading) indicator (aka &quot;spinner&quot;) when it needed.
Defaults to nil (no activity indicator).</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) RCTSurfaceHostingViewActivityIndicatorViewFactory activityIndicatorViewFactory</Declaration>
			
			
			<Anchor>//api/name/activityIndicatorViewFactory</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/activityIndicatorViewFactory</TokenIdentifier>
			<Abstract type="html">Activity indicator factory.
A hosting view may use this block to instantiate and display custom activity
(loading) indicator (aka &quot;spinner&quot;) when it needed.
Defaults to nil (no activity indicator).</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) RCTSurfaceHostingViewActivityIndicatorViewFactory activityIndicatorViewFactory</Declaration>
			
			
			<Anchor>//api/name/activityIndicatorViewFactory</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurfaceHostingView/activityIndicatorViewFactory</TokenIdentifier>
			<Abstract type="html">Activity indicator factory.
A hosting view may use this block to instantiate and display custom activity
(loading) indicator (aka &quot;spinner&quot;) when it needed.
Defaults to nil (no activity indicator).</Abstract>
			<DeclaredIn>RCTSurfaceHostingView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) RCTSurfaceHostingViewActivityIndicatorViewFactory activityIndicatorViewFactory</Declaration>
			
			
			<Anchor>//api/name/activityIndicatorViewFactory</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setIsActivityIndicatorViewVisible:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isActivityIndicatorViewVisible</Declaration>
			
			
			<Anchor>//api/name/isActivityIndicatorViewVisible</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/isActivityIndicatorViewVisible</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isActivityIndicatorViewVisible</Declaration>
			
			
			<Anchor>//api/name/isActivityIndicatorViewVisible</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurfaceHostingView/isActivityIndicatorViewVisible</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isActivityIndicatorViewVisible</Declaration>
			
			
			<Anchor>//api/name/isActivityIndicatorViewVisible</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/setIsSurfaceViewVisible:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isSurfaceViewVisible</Declaration>
			
			
			<Anchor>//api/name/isSurfaceViewVisible</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTSurfaceHostingView/isSurfaceViewVisible</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isSurfaceViewVisible</Declaration>
			
			
			<Anchor>//api/name/isSurfaceViewVisible</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTSurfaceHostingView/isSurfaceViewVisible</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTSurfaceHostingView.mm</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isSurfaceViewVisible</Declaration>
			
			
			<Anchor>//api/name/isSurfaceViewVisible</Anchor>
            <NodeRef refid="192"/>
		</Token>
		
        
        
	</File>
</Tokens>