<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RCTRootView.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RCTRootView</TokenIdentifier>
			<Abstract type="html">Native view used to host React-managed views within the app. Can be used just
like any ordinary UIView. You can have multiple RCTRootViews on screen at
once, all controlled by the same JavaScript application.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
            
			
			<NodeRef refid="154"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/initWithBridge:moduleName:initialProperties:</TokenIdentifier>
			<Abstract type="html">- Designated initializer -</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithBridge:(RCTBridge *)bridge moduleName:(NSString *)moduleName initialProperties:(NSDictionary *)initialProperties</Declaration>
			
			
			<Anchor>//api/name/initWithBridge:moduleName:initialProperties:</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/initWithBundleURL:moduleName:initialProperties:launchOptions:</TokenIdentifier>
			<Abstract type="html">- Convenience initializer -
A bridge will be created internally.
This initializer is intended to be used when the app has a single RCTRootView,
otherwise create an RCTBridge and pass it in via initWithBridge:moduleName:
to all the instances.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithBundleURL:(NSURL *)bundleURL moduleName:(NSString *)moduleName initialProperties:(NSDictionary *)initialProperties launchOptions:(NSDictionary *)launchOptions</Declaration>
			
			
			<Anchor>//api/name/initWithBundleURL:moduleName:initialProperties:launchOptions:</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setModuleName:</TokenIdentifier>
			<Abstract type="html">The name of the JavaScript module to execute within the
specified scriptURL (required). Setting this will not have
any immediate effect, but it must be done prior to loading
the script.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *moduleName</Declaration>
			
			
			<Anchor>//api/name/moduleName</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/moduleName</TokenIdentifier>
			<Abstract type="html">The name of the JavaScript module to execute within the
specified scriptURL (required). Setting this will not have
any immediate effect, but it must be done prior to loading
the script.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *moduleName</Declaration>
			
			
			<Anchor>//api/name/moduleName</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/moduleName</TokenIdentifier>
			<Abstract type="html">The name of the JavaScript module to execute within the
specified scriptURL (required). Setting this will not have
any immediate effect, but it must be done prior to loading
the script.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *moduleName</Declaration>
			
			
			<Anchor>//api/name/moduleName</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setBridge:</TokenIdentifier>
			<Abstract type="html">The bridge used by the root view. Bridges can be shared between multiple
root views, so you can use this property to initialize another RCTRootView.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/bridge</TokenIdentifier>
			<Abstract type="html">The bridge used by the root view. Bridges can be shared between multiple
root views, so you can use this property to initialize another RCTRootView.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/bridge</TokenIdentifier>
			<Abstract type="html">The bridge used by the root view. Bridges can be shared between multiple
root views, so you can use this property to initialize another RCTRootView.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RCTBridge *bridge</Declaration>
			
			
			<Anchor>//api/name/bridge</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setAppProperties:</TokenIdentifier>
			<Abstract type="html">The properties to apply to the view. Use this property to update
application properties and rerender the view. Initialized with
initialProperties argument of the initializer.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readwrite) NSDictionary *appProperties</Declaration>
			
			
			<Anchor>//api/name/appProperties</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/appProperties</TokenIdentifier>
			<Abstract type="html">The properties to apply to the view. Use this property to update
application properties and rerender the view. Initialized with
initialProperties argument of the initializer.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readwrite) NSDictionary *appProperties</Declaration>
			
			
			<Anchor>//api/name/appProperties</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/appProperties</TokenIdentifier>
			<Abstract type="html">The properties to apply to the view. Use this property to update
application properties and rerender the view. Initialized with
initialProperties argument of the initializer.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readwrite) NSDictionary *appProperties</Declaration>
			
			
			<Anchor>//api/name/appProperties</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setSizeFlexibility:</TokenIdentifier>
			<Abstract type="html">The size flexibility mode of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RCTRootViewSizeFlexibility sizeFlexibility</Declaration>
			
			
			<Anchor>//api/name/sizeFlexibility</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/sizeFlexibility</TokenIdentifier>
			<Abstract type="html">The size flexibility mode of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RCTRootViewSizeFlexibility sizeFlexibility</Declaration>
			
			
			<Anchor>//api/name/sizeFlexibility</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/sizeFlexibility</TokenIdentifier>
			<Abstract type="html">The size flexibility mode of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RCTRootViewSizeFlexibility sizeFlexibility</Declaration>
			
			
			<Anchor>//api/name/sizeFlexibility</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate that handles intrinsic size updates.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;RCTRootViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/delegate</TokenIdentifier>
			<Abstract type="html">The delegate that handles intrinsic size updates.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;RCTRootViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/delegate</TokenIdentifier>
			<Abstract type="html">The delegate that handles intrinsic size updates.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;RCTRootViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setReactViewController:</TokenIdentifier>
			<Abstract type="html">The backing view controller of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) UIViewController *reactViewController</Declaration>
			
			
			<Anchor>//api/name/reactViewController</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/reactViewController</TokenIdentifier>
			<Abstract type="html">The backing view controller of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) UIViewController *reactViewController</Declaration>
			
			
			<Anchor>//api/name/reactViewController</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/reactViewController</TokenIdentifier>
			<Abstract type="html">The backing view controller of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) UIViewController *reactViewController</Declaration>
			
			
			<Anchor>//api/name/reactViewController</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setContentView:</TokenIdentifier>
			<Abstract type="html">The React-managed contents view of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) UIView *contentView</Declaration>
			
			
			<Anchor>//api/name/contentView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/contentView</TokenIdentifier>
			<Abstract type="html">The React-managed contents view of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) UIView *contentView</Declaration>
			
			
			<Anchor>//api/name/contentView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/contentView</TokenIdentifier>
			<Abstract type="html">The React-managed contents view of the root view.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) UIView *contentView</Declaration>
			
			
			<Anchor>//api/name/contentView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setLoadingView:</TokenIdentifier>
			<Abstract type="html">A view to display while the JavaScript is loading, so users aren&apos;t presented
with a blank screen. By default this is nil, but you can override it with
(for example) a UIActivityIndicatorView or a placeholder image.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *loadingView</Declaration>
			
			
			<Anchor>//api/name/loadingView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/loadingView</TokenIdentifier>
			<Abstract type="html">A view to display while the JavaScript is loading, so users aren&apos;t presented
with a blank screen. By default this is nil, but you can override it with
(for example) a UIActivityIndicatorView or a placeholder image.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *loadingView</Declaration>
			
			
			<Anchor>//api/name/loadingView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/loadingView</TokenIdentifier>
			<Abstract type="html">A view to display while the JavaScript is loading, so users aren&apos;t presented
with a blank screen. By default this is nil, but you can override it with
(for example) a UIActivityIndicatorView or a placeholder image.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *loadingView</Declaration>
			
			
			<Anchor>//api/name/loadingView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/cancelTouches</TokenIdentifier>
			<Abstract type="html">Calling this will result in emitting a &quot;touches cancelled&quot; event to js,
which effectively cancels all js &quot;gesture recognizers&quot; such as touchable components
(unless they explicitely ignore cancellation events, but no one should do that).</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>- (void)cancelTouches</Declaration>
			
			
			<Anchor>//api/name/cancelTouches</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setPassThroughTouches:</TokenIdentifier>
			<Abstract type="html">When set, any touches on the RCTRootView that are not matched up to any of the child
views will be passed to siblings of the RCTRootView. See [UIView hitTest:withEvent:]
for details on iOS hit testing.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL passThroughTouches</Declaration>
			
			
			<Anchor>//api/name/passThroughTouches</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/passThroughTouches</TokenIdentifier>
			<Abstract type="html">When set, any touches on the RCTRootView that are not matched up to any of the child
views will be passed to siblings of the RCTRootView. See [UIView hitTest:withEvent:]
for details on iOS hit testing.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL passThroughTouches</Declaration>
			
			
			<Anchor>//api/name/passThroughTouches</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/passThroughTouches</TokenIdentifier>
			<Abstract type="html">When set, any touches on the RCTRootView that are not matched up to any of the child
views will be passed to siblings of the RCTRootView. See [UIView hitTest:withEvent:]
for details on iOS hit testing.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL passThroughTouches</Declaration>
			
			
			<Anchor>//api/name/passThroughTouches</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setLoadingViewFadeDelay:</TokenIdentifier>
			<Abstract type="html">Timings for hiding the loading view after the content has loaded. Both of
these values default to 0.25 seconds.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval loadingViewFadeDelay</Declaration>
			
			
			<Anchor>//api/name/loadingViewFadeDelay</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/loadingViewFadeDelay</TokenIdentifier>
			<Abstract type="html">Timings for hiding the loading view after the content has loaded. Both of
these values default to 0.25 seconds.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval loadingViewFadeDelay</Declaration>
			
			
			<Anchor>//api/name/loadingViewFadeDelay</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/loadingViewFadeDelay</TokenIdentifier>
			<Abstract type="html">Timings for hiding the loading view after the content has loaded. Both of
these values default to 0.25 seconds.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval loadingViewFadeDelay</Declaration>
			
			
			<Anchor>//api/name/loadingViewFadeDelay</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setLoadingViewFadeDuration:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval loadingViewFadeDuration</Declaration>
			
			
			<Anchor>//api/name/loadingViewFadeDuration</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/loadingViewFadeDuration</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval loadingViewFadeDuration</Declaration>
			
			
			<Anchor>//api/name/loadingViewFadeDuration</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/loadingViewFadeDuration</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval loadingViewFadeDuration</Declaration>
			
			
			<Anchor>//api/name/loadingViewFadeDuration</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/set:</TokenIdentifier>
			<Abstract type="html">The intrinsic size of the root view&apos;s content. This is set right before the
rootViewDidChangeIntrinsicSize method of RCTRootViewDelegate is called.
This property is deprecated and will be removed in next releases.
Use UIKit intrinsicContentSize propery instead.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, assign) CGSize intrinsicSize __deprecated_msg ( &quot;Use `intrinsicContentSize` instead.&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/)</TokenIdentifier>
			<Abstract type="html">The intrinsic size of the root view&apos;s content. This is set right before the
rootViewDidChangeIntrinsicSize method of RCTRootViewDelegate is called.
This property is deprecated and will be removed in next releases.
Use UIKit intrinsicContentSize propery instead.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, assign) CGSize intrinsicSize __deprecated_msg ( &quot;Use `intrinsicContentSize` instead.&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/)</TokenIdentifier>
			<Abstract type="html">The intrinsic size of the root view&apos;s content. This is set right before the
rootViewDidChangeIntrinsicSize method of RCTRootViewDelegate is called.
This property is deprecated and will be removed in next releases.
Use UIKit intrinsicContentSize propery instead.</Abstract>
			<DeclaredIn>RCTRootView.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, assign) CGSize intrinsicSize __deprecated_msg ( &quot;Use `intrinsicContentSize` instead.&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setIntrinsicContentSize:</TokenIdentifier>
			<Abstract type="html">This setter should be used only by RCTUIManager on react root view
intrinsic content size update.</Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic, assign) CGSize intrinsicContentSize</Declaration>
			
			
			<Anchor>//api/name/intrinsicContentSize</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/intrinsicContentSize</TokenIdentifier>
			<Abstract type="html">This setter should be used only by RCTUIManager on react root view
intrinsic content size update.</Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic, assign) CGSize intrinsicContentSize</Declaration>
			
			
			<Anchor>//api/name/intrinsicContentSize</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/intrinsicContentSize</TokenIdentifier>
			<Abstract type="html">This setter should be used only by RCTUIManager on react root view
intrinsic content size update.</Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic, assign) CGSize intrinsicContentSize</Declaration>
			
			
			<Anchor>//api/name/intrinsicContentSize</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setTvRemoteHandler:</TokenIdentifier>
			<Abstract type="html">TV remote gesture recognizers</Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RCTTVRemoteHandler *tvRemoteHandler</Declaration>
			
			
			<Anchor>//api/name/tvRemoteHandler</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/tvRemoteHandler</TokenIdentifier>
			<Abstract type="html">TV remote gesture recognizers</Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RCTTVRemoteHandler *tvRemoteHandler</Declaration>
			
			
			<Anchor>//api/name/tvRemoteHandler</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/tvRemoteHandler</TokenIdentifier>
			<Abstract type="html">TV remote gesture recognizers</Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RCTTVRemoteHandler *tvRemoteHandler</Declaration>
			
			
			<Anchor>//api/name/tvRemoteHandler</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/setReactPreferredFocusedView:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *reactPreferredFocusedView</Declaration>
			
			
			<Anchor>//api/name/reactPreferredFocusedView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/reactPreferredFocusedView</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *reactPreferredFocusedView</Declaration>
			
			
			<Anchor>//api/name/reactPreferredFocusedView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RCTRootView/reactPreferredFocusedView</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIView *reactPreferredFocusedView</Declaration>
			
			
			<Anchor>//api/name/reactPreferredFocusedView</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTRootView/contentViewInvalidated</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTRootViewInternal.h</DeclaredIn>
			
			<Declaration>- (void)contentViewInvalidated</Declaration>
			
			
			<Anchor>//api/name/contentViewInvalidated</Anchor>
            <NodeRef refid="154"/>
		</Token>
		
        
        
	</File>
</Tokens>