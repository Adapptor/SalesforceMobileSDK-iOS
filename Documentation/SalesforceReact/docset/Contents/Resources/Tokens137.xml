<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RCTPerformanceLogger.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RCTPerformanceLogger</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
            
			
			<NodeRef refid="137"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/markStartForTag:</TokenIdentifier>
			<Abstract type="html">Starts measuring a metric with the given tag.
Overrides previous value if the measurement has been already started.
If RCTProfile is enabled it also begins appropriate async event.
All work is scheduled on the background queue so this doesn&apos;t block current thread.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (void)markStartForTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/markStartForTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/markStopForTag:</TokenIdentifier>
			<Abstract type="html">Stops measuring a metric with given tag.
Checks if RCTPerformanceLoggerStart() has been called before
and doesn&apos;t do anything and log a message if it hasn&apos;t.
If RCTProfile is enabled it also ends appropriate async event.
All work is scheduled on the background queue so this doesn&apos;t block current thread.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (void)markStopForTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/markStopForTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/setValue:forTag:</TokenIdentifier>
			<Abstract type="html">Sets given value for a metric with given tag.
All work is scheduled on the background queue so this doesn&apos;t block current thread.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (void)setValue:(int64_t)value forTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/setValue:forTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/addValue:forTag:</TokenIdentifier>
			<Abstract type="html">Adds given value to the current value for a metric with given tag.
All work is scheduled on the background queue so this doesn&apos;t block current thread.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (void)addValue:(int64_t)value forTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/addValue:forTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/appendStartForTag:</TokenIdentifier>
			<Abstract type="html">Starts an additional measurement for a metric with given tag.
It doesn&apos;t override previous measurement, instead it&apos;ll append a new value
to the old one.
All work is scheduled on the background queue so this doesn&apos;t block current thread.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (void)appendStartForTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/appendStartForTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/appendStopForTag:</TokenIdentifier>
			<Abstract type="html">Stops measurement and appends the result to the metric with given tag.
Checks if RCTPerformanceLoggerAppendStart() has been called before
and doesn&apos;t do anything and log a message if it hasn&apos;t.
All work is scheduled on the background queue so this doesn&apos;t block current thread.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (void)appendStopForTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/appendStopForTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/valuesForTags</TokenIdentifier>
			<Abstract type="html">Returns an array with values for all tags.
Use RCTPLTag to go over the array, there&apos;s a pair of values
for each tag: start and stop (with indexes 2  tag and 2  tag + 1).</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;NSNumber*&gt; *)valuesForTags</Declaration>
			
			
			<Anchor>//api/name/valuesForTags</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/durationForTag:</TokenIdentifier>
			<Abstract type="html">Returns a duration in ms (stoptime - starttime) for given RCTPLTag.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (int64_t)durationForTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/durationForTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/valueForTag:</TokenIdentifier>
			<Abstract type="html">Returns a value for given RCTPLTag.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (int64_t)valueForTag:(RCTPLTag)tag</Declaration>
			
			
			<Anchor>//api/name/valueForTag:</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RCTPerformanceLogger/labelsForTags</TokenIdentifier>
			<Abstract type="html">Returns an array with values for all tags.
Use RCTPLTag to go over the array.</Abstract>
			<DeclaredIn>RCTPerformanceLogger.h</DeclaredIn>
			
			<Declaration>- (NSArray&lt;NSString*&gt; *)labelsForTags</Declaration>
			
			
			<Anchor>//api/name/labelsForTags</Anchor>
            <NodeRef refid="137"/>
		</Token>
		
        
        
	</File>
</Tokens>